Directory structure:
└── pavelos10-bca/
    ├── CheckpointApp.sln
    ├── git
    └── CheckpointApp/
        ├── App.xaml
        ├── App.xaml.cs
        ├── AssemblyInfo.cs
        ├── CheckpointApp.csproj
        ├── MainWindow.xaml
        ├── MainWindow.xaml.cs
        ├── DataAccess/
        │   └── DatabaseService.cs
        ├── Helpers/
        │   └── PasswordAndNameHelpers.cs
        ├── Models/
        │   └── AllModels.cs
        ├── Services/
        │   ├── ExcelExportService.cs
        │   └── SecurityService.cs
        ├── ViewModels/
        │   ├── AnalyticsViewModel.cs
        │   ├── FirstAdminViewModel.cs
        │   ├── GoodsViewModel.cs
        │   ├── LoginViewModel.cs
        │   ├── MainViewModel.cs
        │   ├── PeopleInZoneViewModel.cs
        │   ├── RegistrationViewModel.cs
        │   ├── UserManagementViewModel.cs
        │   ├── WantedListManagementViewModel.cs
        │   └── WatchlistManagementViewModel.cs
        └── Views/
            ├── AnalyticsWindow.xaml
            ├── AnalyticsWindow.xaml.cs
            ├── FirstAdminWindow.xaml
            ├── FirstAdminWindow.xaml.cs
            ├── GoodsWindow.xaml
            ├── GoodsWindow.xaml.cs
            ├── LoginWindow.xaml
            ├── LoginWindow.xaml.cs
            ├── MainWindow.xaml
            ├── MainWindow.xaml.cs
            ├── PeopleInZoneWindow.xaml
            ├── PeopleInZoneWindow.xaml.cs
            ├── RegistrationWindow.xaml
            ├── RegistrationWindow.xaml.cs
            ├── UserManagementWindow.xaml
            ├── UserManagementWindow.xaml.cs
            ├── WantedListManagementWindow.xaml
            ├── WantedListManagementWindow.xaml.cs
            ├── WatchlistManagementWindow.xaml
            └── WatchlistManagementWindow.xaml.cs


Files Content:

================================================
FILE: CheckpointApp.sln
================================================
﻿
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.13.35919.96 d17.13
MinimumVisualStudioVersion = 10.0.40219.1
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "CheckpointApp", "CheckpointApp\CheckpointApp.csproj", "{3933AB7D-AA3B-4485-84E7-B0FB4A475549}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{3933AB7D-AA3B-4485-84E7-B0FB4A475549}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{3933AB7D-AA3B-4485-84E7-B0FB4A475549}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{3933AB7D-AA3B-4485-84E7-B0FB4A475549}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{3933AB7D-AA3B-4485-84E7-B0FB4A475549}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {0C11E818-641C-49D0-B6D0-D87BA5D747B6}
	EndGlobalSection
EndGlobal



================================================
FILE: git
================================================
[Empty file]


================================================
FILE: CheckpointApp/App.xaml
================================================
﻿<Application x:Class="CheckpointApp.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:CheckpointApp">
    <Application.Resources>

    </Application.Resources>
</Application>



================================================
FILE: CheckpointApp/App.xaml.cs
================================================
﻿using System.Linq;
using System.Windows;
using CheckpointApp.DataAccess;
using CheckpointApp.ViewModels;
using CheckpointApp.Views;

namespace CheckpointApp
{
    public partial class App : Application
    {
        private readonly DatabaseService _databaseService;

        public App()
        {
            _databaseService = new DatabaseService();
        }

        protected override async void OnStartup(StartupEventArgs e)
        {
            base.OnStartup(e);

            var userCount = await _databaseService.GetUserCountAsync();

            if (userCount == 0)
            {
                var firstAdminWindow = new FirstAdminWindow
                {
                    DataContext = new FirstAdminViewModel(_databaseService)
                };

                if (firstAdminWindow.ShowDialog() != true)
                {
                    // Если пользователь не создал администратора, закрываем приложение
                    Shutdown();
                    return;
                }
            }

            // В любом случае после проверки показываем окно входа
            ShowLoginWindow();
        }

        private void ShowLoginWindow()
        {
            var loginWindow = new LoginWindow
            {
                DataContext = new LoginViewModel(_databaseService)
            };

            if (loginWindow.ShowDialog() == true)
            {
                // Если логин успешен, получаем ViewModel, который теперь содержит данные о пользователе
                var loginViewModel = (LoginViewModel)loginWindow.DataContext;

                // Создаем главное окно
                var mainWindow = new MainWindow
                {
                    DataContext = new MainViewModel(_databaseService, loginViewModel.LoggedInUser!)
                };

                // --- ВАЖНОЕ ИСПРАВЛЕНИЕ ---
                // Назначаем созданное окно главным окном приложения.
                // Теперь приложение будет работать, пока это окно не закроется.
                Current.MainWindow = mainWindow;
                mainWindow.Show();
            }
            else
            {
                // Если пользователь закрыл окно входа, завершаем приложение
                Shutdown();
            }
        }
    }
}



================================================
FILE: CheckpointApp/AssemblyInfo.cs
================================================
using System.Windows;

[assembly: ThemeInfo(
    ResourceDictionaryLocation.None,            //where theme specific resource dictionaries are located
                                                //(used if a resource is not found in the page,
                                                // or application resource dictionaries)
    ResourceDictionaryLocation.SourceAssembly   //where the generic resource dictionary is located
                                                //(used if a resource is not found in the page,
                                                // app, or any theme specific resource dictionaries)
)]



================================================
FILE: CheckpointApp/CheckpointApp.csproj
================================================
﻿<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net8.0-windows</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <UseWPF>true</UseWPF>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="ClosedXML" Version="0.105.0" />
    <PackageReference Include="CommunityToolkit.Mvvm" Version="8.4.0" />
    <PackageReference Include="Dapper" Version="2.1.66" />
    <PackageReference Include="Extended.Wpf.Toolkit" Version="4.7.25104.5739" />
    <PackageReference Include="Microsoft.Data.Sqlite" Version="9.0.8" />
    <PackageReference Include="ScottPlot.WPF" Version="5.0.55" />
  </ItemGroup>

</Project>



================================================
FILE: CheckpointApp/MainWindow.xaml
================================================
﻿<Window x:Class="CheckpointApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:CheckpointApp"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid>

    </Grid>
</Window>



================================================
FILE: CheckpointApp/MainWindow.xaml.cs
================================================
﻿using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace CheckpointApp
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }
    }
}


================================================
FILE: CheckpointApp/DataAccess/DatabaseService.cs
================================================
﻿using Microsoft.Data.Sqlite;
using Dapper;
using System.IO;
using CheckpointApp.Models;

namespace CheckpointApp.DataAccess
{
    public class DatabaseService
    {
        private readonly string _databasePath;

        public DatabaseService()
        {
            // База данных будет создана в папке с приложением
            _databasePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "checkpoint_control.db");
            InitializeDatabase();
        }

        private SqliteConnection GetConnection()
        {
            return new SqliteConnection($"Data Source={_databasePath}");
        }

        public void InitializeDatabase()
        {
            using var connection = GetConnection();
            connection.Open();

            var tableCommands = new[]
            {
                @"CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY,
                    username TEXT NOT NULL UNIQUE,
                    password_hash TEXT NOT NULL,
                    is_admin BOOLEAN NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );",
                @"CREATE TABLE IF NOT EXISTS persons (
                    id INTEGER PRIMARY KEY,
                    last_name TEXT NOT NULL,
                    first_name TEXT NOT NULL,
                    patronymic TEXT,
                    dob TEXT NOT NULL,
                    citizenship TEXT NOT NULL,
                    passport_data TEXT NOT NULL UNIQUE,
                    notes TEXT
                );",
                @"CREATE TABLE IF NOT EXISTS vehicles (
                    id INTEGER PRIMARY KEY,
                    make TEXT NOT NULL,
                    license_plate TEXT NOT NULL UNIQUE
                );",
                @"CREATE TABLE IF NOT EXISTS crossings (
                    id INTEGER PRIMARY KEY,
                    person_id INTEGER NOT NULL,
                    vehicle_id INTEGER,
                    direction TEXT NOT NULL,
                    purpose TEXT,
                    destination_town TEXT,
                    crossing_type TEXT NOT NULL,
                    operator_id INTEGER NOT NULL,
                    timestamp TEXT NOT NULL,
                    FOREIGN KEY (person_id) REFERENCES persons(id) ON DELETE CASCADE,
                    FOREIGN KEY (vehicle_id) REFERENCES vehicles(id) ON DELETE SET NULL,
                    FOREIGN KEY (operator_id) REFERENCES users(id)
                );",
                @"CREATE TABLE IF NOT EXISTS goods (
                    id INTEGER PRIMARY KEY,
                    crossing_id INTEGER NOT NULL,
                    description TEXT NOT NULL,
                    quantity REAL,
                    unit TEXT,
                    FOREIGN KEY (crossing_id) REFERENCES crossings(id) ON DELETE CASCADE
                );",
                @"CREATE TABLE IF NOT EXISTS wanted_persons (
                    id INTEGER PRIMARY KEY,
                    last_name TEXT NOT NULL,
                    first_name TEXT NOT NULL,
                    patronymic TEXT,
                    dob TEXT NOT NULL,
                    info TEXT,
                    actions TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );",
                @"CREATE TABLE IF NOT EXISTS watchlist_persons (
                    id INTEGER PRIMARY KEY,
                    last_name TEXT NOT NULL,
                    first_name TEXT NOT NULL,
                    patronymic TEXT,
                    dob TEXT NOT NULL,
                    reason TEXT
                );"
            };

            foreach (var command in tableCommands)
            {
                connection.Execute(command);
            }
        }

        // --- Методы для работы с пользователями ---
        public async Task<User?> GetUserByUsernameAsync(string username)
        {
            using var connection = GetConnection();
            return await connection.QuerySingleOrDefaultAsync<User>(
                "SELECT * FROM users WHERE username = @Username", new { Username = username.ToUpper() });
        }

        public async Task<bool> AddUserAsync(User user)
        {
            using var connection = GetConnection();
            var sql = "INSERT INTO users (username, password_hash, is_admin) VALUES (@Username, @PasswordHash, @IsAdmin)";
            var affectedRows = await connection.ExecuteAsync(sql, new { user.Username, user.PasswordHash, user.IsAdmin });
            return affectedRows > 0;
        }

        public async Task<int> GetUserCountAsync()
        {
            using var connection = GetConnection();
            return await connection.ExecuteScalarAsync<int>("SELECT COUNT(*) FROM users");
        }
        public async Task<IEnumerable<User>> GetAllUsersAsync()
        {
            using var connection = GetConnection();
            return await connection.QueryAsync<User>("SELECT * FROM users ORDER BY username");
        }

        // --- НОВЫЙ МЕТОД: Удаление пользователя ---
        public async Task<bool> DeleteUserAsync(int id)
        {
            using var connection = GetConnection();
            var sql = "DELETE FROM users WHERE id = @Id";
            var affectedRows = await connection.ExecuteAsync(sql, new { Id = id });
            return affectedRows > 0;
        }
        public async Task<int> AddWantedPersonAsync(WantedPerson person)
        {
            using var connection = GetConnection();
            var sql = @"
                INSERT INTO wanted_persons (last_name, first_name, patronymic, dob, info, actions)
                VALUES (@LastName, @FirstName, @Patronymic, @Dob, @Info, @Actions)
                RETURNING id;";
            return await connection.ExecuteScalarAsync<int>(sql, person);
        }

        // --- НОВЫЙ МЕТОД: Удаление лица из списка розыска ---
        public async Task<bool> DeleteWantedPersonAsync(int id)
        {
            using var connection = GetConnection();
            var sql = "DELETE FROM wanted_persons WHERE id = @Id";
            var affectedRows = await connection.ExecuteAsync(sql, new { Id = id });
            return affectedRows > 0;
        }
        public async Task<int> AddWatchlistPersonAsync(WatchlistPerson person)
        {
            using var connection = GetConnection();
            var sql = @"
                INSERT INTO watchlist_persons (last_name, first_name, patronymic, dob, reason)
                VALUES (@LastName, @FirstName, @Patronymic, @Dob, @Reason)
                RETURNING id;";
            return await connection.ExecuteScalarAsync<int>(sql, person);
        }

        // --- НОВЫЙ МЕТОД: Удаление лица из списка наблюдения ---
        public async Task<bool> DeleteWatchlistPersonAsync(int id)
        {
            using var connection = GetConnection();
            var sql = "DELETE FROM watchlist_persons WHERE id = @Id";
            var affectedRows = await connection.ExecuteAsync(sql, new { Id = id });
            return affectedRows > 0;
        }
        public async Task<IEnumerable<Crossing>> GetAllCrossingsAsync()
        {
            using var connection = GetConnection();
            var sql = @"
                SELECT 
                    c.*, 
                    p.last_name || ' ' || p.first_name || ' ' || IFNULL(p.patronymic, '') AS FullName,
                    p.dob as PersonDob,
                    p.passport_data as PersonPassport,
                    IFNULL(v.make || '/' || v.license_plate, '') AS VehicleInfo,
                    u.username AS OperatorUsername
                FROM crossings c
                JOIN persons p ON c.person_id = p.id
                LEFT JOIN vehicles v ON c.vehicle_id = v.id
                JOIN users u ON c.operator_id = u.id
                ORDER BY c.timestamp DESC";
            return await connection.QueryAsync<Crossing>(sql);
        }

        public async Task<Person?> FindPersonByPassportAsync(string passportData)
        {
            using var connection = GetConnection();
            return await connection.QuerySingleOrDefaultAsync<Person>(
                "SELECT * FROM persons WHERE passport_data = @PassportData",
                new { PassportData = passportData.ToUpper() });
        }

        public async Task<Vehicle?> FindVehicleByLicensePlateAsync(string licensePlate)
        {
            using var connection = GetConnection();
            return await connection.QuerySingleOrDefaultAsync<Vehicle>(
                "SELECT * FROM vehicles WHERE license_plate = @LicensePlate",
                new { LicensePlate = licensePlate.ToUpper() });
        }

        public async Task<int> CreatePersonAsync(Person person)
        {
            using var connection = GetConnection();
            var sql = @"
                INSERT INTO persons (last_name, first_name, patronymic, dob, citizenship, passport_data, notes)
                VALUES (@LastName, @FirstName, @Patronymic, @Dob, @Citizenship, @PassportData, @Notes)
                RETURNING id;";
            return await connection.ExecuteScalarAsync<int>(sql, person);
        }

        public async Task<int> CreateVehicleAsync(Vehicle vehicle)
        {
            using var connection = GetConnection();
            var sql = @"
                INSERT INTO vehicles (make, license_plate)
                VALUES (@Make, @LicensePlate)
                RETURNING id;";
            return await connection.ExecuteScalarAsync<int>(sql, vehicle);
        }

        public async Task<int> CreateCrossingAsync(Crossing crossing)
        {
            using var connection = GetConnection();
            var sql = @"
                INSERT INTO crossings (person_id, vehicle_id, direction, purpose, destination_town, crossing_type, operator_id, timestamp)
                VALUES (@PersonId, @VehicleId, @Direction, @Purpose, @DestinationTown, @CrossingType, @OperatorId, @Timestamp)
                RETURNING id;";
            return await connection.ExecuteScalarAsync<int>(sql, crossing);
        }

        public async Task AddGoodsAsync(IEnumerable<Good> goods)
        {
            using var connection = GetConnection();
            var sql = @"
                INSERT INTO goods (crossing_id, description, quantity, unit)
                VALUES (@CrossingId, @Description, @Quantity, @Unit);";
            await connection.ExecuteAsync(sql, goods);
        }

        public async Task<IEnumerable<WantedPerson>> GetWantedPersonsAsync()
        {
            using var connection = GetConnection();
            return await connection.QueryAsync<WantedPerson>("SELECT * FROM wanted_persons");
        }

        public async Task<IEnumerable<WatchlistPerson>> GetWatchlistPersonsAsync()
        {
            using var connection = GetConnection();
            return await connection.QueryAsync<WatchlistPerson>("SELECT * FROM watchlist_persons");
        }
        public async Task<IEnumerable<PersonInZone>> GetPersonsInZoneAsync()
        {
            using var connection = GetConnection();
            // Этот запрос находит последнее пересечение для каждого человека
            // и возвращает данные, если это пересечение было "ВЪЕЗД".
            var sql = @"
                WITH LastCrossing AS (
                    SELECT
                        person_id,
                        MAX(timestamp) AS last_timestamp
                    FROM crossings
                    GROUP BY person_id
                )
                SELECT
                    p.last_name || ' ' || p.first_name || ' ' || IFNULL(p.patronymic, '') AS FullName,
                    p.dob AS Dob,
                    p.passport_data AS PassportData,
                    p.citizenship AS Citizenship,
                    c.destination_town AS DestinationTown,
                    c.timestamp AS Timestamp,
                    IFNULL(v.make || '/' || v.license_plate, 'Пешком') AS VehicleInfo
                FROM crossings c
                JOIN LastCrossing lc ON c.person_id = lc.person_id AND c.timestamp = lc.last_timestamp
                JOIN persons p ON c.person_id = p.id
                LEFT JOIN vehicles v ON c.vehicle_id = v.id
                WHERE c.direction = 'ВЪЕЗД'
                ORDER BY c.destination_town, c.timestamp DESC;
            ";
            return await connection.QueryAsync<PersonInZone>(sql);
        }
        public async Task<IEnumerable<Crossing>> GetCrossingsByDateRangeAsync(DateTime startDate, DateTime endDate)
        {
            using var connection = GetConnection();
            // endDate.AddDays(1) используется для включения всего последнего дня в диапазон
            var sql = @"
                SELECT 
                    c.*, 
                    p.last_name || ' ' || p.first_name || ' ' || IFNULL(p.patronymic, '') AS FullName,
                    p.dob as PersonDob,
                    p.passport_data as PersonPassport,
                    p.citizenship, -- Добавляем гражданство для аналитики
                    IFNULL(v.make || '/' || v.license_plate, '') AS VehicleInfo,
                    u.username AS OperatorUsername
                FROM crossings c
                JOIN persons p ON c.person_id = p.id
                LEFT JOIN vehicles v ON c.vehicle_id = v.id
                JOIN users u ON c.operator_id = u.id
                WHERE c.timestamp BETWEEN @StartDate AND @EndDate
                ORDER BY c.timestamp DESC";

            return await connection.QueryAsync<Crossing>(sql, new
            {
                StartDate = startDate.ToString("yyyy-MM-dd HH:mm:ss"),
                EndDate = endDate.AddDays(1).ToString("yyyy-MM-dd HH:mm:ss")
            });
        }
    }
}



================================================
FILE: CheckpointApp/Helpers/PasswordAndNameHelpers.cs
================================================
[Binary file]


================================================
FILE: CheckpointApp/Models/AllModels.cs
================================================
﻿using CommunityToolkit.Mvvm.ComponentModel;
using System;
using System.Collections.Generic;

namespace CheckpointApp.Models
{
    // Модель пользователя системы
    public class User
    {
        public int ID { get; set; }
        public string Username { get; set; } = string.Empty;
        public string PasswordHash { get; set; } = string.Empty;
        public bool IsAdmin { get; set; }
        public DateTime CreatedAt { get; set; }
    }

    // Модель физического лица (теперь наследуется от ObservableObject для живого поиска)
    public partial class Person : ObservableObject
    {
        [ObservableProperty] private int _id;
        [ObservableProperty] private string _lastName = string.Empty;
        [ObservableProperty] private string _firstName = string.Empty;
        [ObservableProperty] private string? _patronymic;
        [ObservableProperty] private string _dob = string.Empty;
        [ObservableProperty] private string _citizenship = string.Empty;
        [ObservableProperty] private string _passportData = string.Empty;
        [ObservableProperty] private string? _notes;
    }

    // Модель транспортного средства
    public class Vehicle
    {
        public int ID { get; set; }
        public string Make { get; set; } = string.Empty;
        public string LicensePlate { get; set; } = string.Empty;
    }

    // Модель события пересечения границы
    public class Crossing
    {
        public int ID { get; set; }
        public int PersonId { get; set; }
        public int? VehicleId { get; set; }
        public string Direction { get; set; } = string.Empty;
        public string? Purpose { get; set; }
        public string? DestinationTown { get; set; }
        public string CrossingType { get; set; } = string.Empty;
        public int OperatorId { get; set; }
        public string Timestamp { get; set; } = string.Empty;

        // Свойства для отображения и аналитики
        public string FullName { get; set; } = string.Empty;
        public string PersonDob { get; set; } = string.Empty;
        public string PersonPassport { get; set; } = string.Empty;
        public string VehicleInfo { get; set; } = string.Empty;
        public string OperatorUsername { get; set; } = string.Empty;
        public string? Citizenship { get; set; } // <-- ИСПРАВЛЕНО: Добавлено недостающее поле
    }

    // Модель товара/груза
    public class Good
    {
        public int ID { get; set; }
        public int CrossingId { get; set; }
        public string Description { get; set; } = string.Empty;
        public double Quantity { get; set; }
        public string Unit { get; set; } = string.Empty;
    }

    // Модель для временного хранения товаров
    public class TempGood
    {
        public string Description { get; set; } = string.Empty;
        public double Quantity { get; set; }
        public string Unit { get; set; } = string.Empty;
    }

    // Модель лица в списке розыска
    public class WantedPerson
    {
        public int ID { get; set; }
        public string LastName { get; set; } = string.Empty;
        public string FirstName { get; set; } = string.Empty;
        public string? Patronymic { get; set; }
        public string Dob { get; set; } = string.Empty;
        public string Info { get; set; } = string.Empty;
        public string Actions { get; set; } = string.Empty;
        public DateTime CreatedAt { get; set; }
    }

    // Модель лица в списке наблюдения
    public class WatchlistPerson
    {
        public int ID { get; set; }
        public string LastName { get; set; } = string.Empty;
        public string FirstName { get; set; } = string.Empty;
        public string? Patronymic { get; set; }
        public string Dob { get; set; } = string.Empty;
        public string Reason { get; set; } = string.Empty;
    }

    // Модель для окна "Лица в погранзоне"
    public class PersonInZone
    {
        public string FullName { get; set; } = string.Empty;
        public string Dob { get; set; } = string.Empty;
        public string PassportData { get; set; } = string.Empty;
        public string Citizenship { get; set; } = string.Empty;
        public string DestinationTown { get; set; } = string.Empty;
        public string Timestamp { get; set; } = string.Empty;
        public string VehicleInfo { get; set; } = string.Empty;
    }
}



================================================
FILE: CheckpointApp/Services/ExcelExportService.cs
================================================
﻿using System.Collections.Generic;
using System.Threading.Tasks;
using CheckpointApp.Models;
using ClosedXML.Excel;
using System.IO;
using System.Linq;

namespace CheckpointApp.Services
{
    public class ExcelExportService
    {
        // Метод выполняется асинхронно в фоновом потоке
        public Task ExportCrossingsAsync(IEnumerable<Crossing> crossings, string filePath)
        {
            return Task.Run(() =>
            {
                using (var workbook = new XLWorkbook())
                {
                    var worksheet = workbook.Worksheets.Add("Журнал пересечений");

                    // --- Создание заголовка таблицы ---
                    var headers = new[]
                    {
                        "ID", "Дата и время", "Фамилия", "Имя", "Отчество", "Дата рождения",
                        "Гражданство", "Паспортные данные", "Направление", "Тип пересечения",
                        "Марка ТС", "Номер ТС", "Цель", "НП Следования", "Оператор"
                    };

                    for (int i = 0; i < headers.Length; i++)
                    {
                        worksheet.Cell(1, i + 1).Value = headers[i];
                    }
                    // Стилизация заголовка
                    var headerRange = worksheet.Range(1, 1, 1, headers.Length);
                    headerRange.Style.Font.Bold = true;
                    headerRange.Style.Fill.BackgroundColor = XLColor.LightGray;

                    // --- Заполнение данными ---
                    int currentRow = 2;
                    // Разбиваем ФИО и информацию о ТС на отдельные столбцы
                    foreach (var crossing in crossings)
                    {
                        var fullNameParts = crossing.FullName.Split(new[] { ' ' }, 3, System.StringSplitOptions.RemoveEmptyEntries);
                        var vehicleParts = crossing.VehicleInfo.Split(new[] { '/' }, 2, System.StringSplitOptions.RemoveEmptyEntries);

                        worksheet.Cell(currentRow, 1).Value = crossing.ID;
                        worksheet.Cell(currentRow, 2).Value = crossing.Timestamp;
                        worksheet.Cell(currentRow, 3).Value = fullNameParts.Length > 0 ? fullNameParts[0] : "";
                        worksheet.Cell(currentRow, 4).Value = fullNameParts.Length > 1 ? fullNameParts[1] : "";
                        worksheet.Cell(currentRow, 5).Value = fullNameParts.Length > 2 ? fullNameParts[2] : "";
                        worksheet.Cell(currentRow, 6).Value = crossing.PersonDob;
                        worksheet.Cell(currentRow, 7).Value = "N/A"; // Гражданство не было в модели Crossing, добавим заглушку
                        worksheet.Cell(currentRow, 8).Value = crossing.PersonPassport;
                        worksheet.Cell(currentRow, 9).Value = crossing.Direction;
                        worksheet.Cell(currentRow, 10).Value = crossing.CrossingType;
                        worksheet.Cell(currentRow, 11).Value = vehicleParts.Length > 0 ? vehicleParts[0] : "";
                        worksheet.Cell(currentRow, 12).Value = vehicleParts.Length > 1 ? vehicleParts[1] : "";
                        worksheet.Cell(currentRow, 13).Value = crossing.Purpose;
                        worksheet.Cell(currentRow, 14).Value = crossing.DestinationTown;
                        worksheet.Cell(currentRow, 15).Value = crossing.OperatorUsername;

                        currentRow++;
                    }

                    // Автоподбор ширины колонок
                    worksheet.Columns().AdjustToContents();

                    // Сохранение файла
                    workbook.SaveAs(filePath);
                }
            });
        }
    }
}



================================================
FILE: CheckpointApp/Services/SecurityService.cs
================================================
﻿using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using CheckpointApp.DataAccess;
using CheckpointApp.Helpers;
using CheckpointApp.Models;

namespace CheckpointApp.Services
{
    public class SecurityCheckResult
    {
        public bool IsAllowed { get; set; }
        public string Message { get; set; }
        public bool IsWarning { get; set; } // True for watchlist, false for wanted list
    }

    public class SecurityService
    {
        private readonly DatabaseService _databaseService;

        public SecurityService(DatabaseService databaseService)
        {
            _databaseService = databaseService;
        }

        public async Task<SecurityCheckResult> PerformChecksAsync(Person personToCheck)
        {
            // 1. Проверка по списку "Розыск"
            var wantedCheckResult = await CheckWantedListAsync(personToCheck);
            if (!wantedCheckResult.IsAllowed)
            {
                // Если найдено совпадение в списке розыска, показываем диалог и возвращаем результат
                var continueSave = MessageBox.Show(wantedCheckResult.Message, "ЛИЦО В РОЗЫСКЕ / СОВПАДЕНИЯ",
                                                   MessageBoxButton.YesNo, MessageBoxImage.Error);

                return new SecurityCheckResult { IsAllowed = continueSave == MessageBoxResult.Yes, IsWarning = false };
            }

            // 2. Проверка по "Списку наблюдения"
            var watchlistCheckResult = await CheckWatchlistAsync(personToCheck);
            if (!watchlistCheckResult.IsAllowed)
            {
                var continueSave = MessageBox.Show(watchlistCheckResult.Message, "Лицо в списке наблюдения",
                                                   MessageBoxButton.YesNo, MessageBoxImage.Warning);

                // Логируем действие с уровнем "warning" (здесь можно добавить логирование в файл или БД)
                System.Diagnostics.Debug.WriteLine($"WARNING: Operator confirmed saving for a person on the watchlist: {personToCheck.LastName}");

                return new SecurityCheckResult { IsAllowed = continueSave == MessageBoxResult.Yes, IsWarning = true };
            }

            // Если проверок не пройдено
            return new SecurityCheckResult { IsAllowed = true };
        }

        private async Task<SecurityCheckResult> CheckWantedListAsync(Person personToCheck)
        {
            var wantedPersons = await _databaseService.GetWantedPersonsAsync();
            var matches = new List<string>();

            var normalizedLastName = NameNormalizer.NormalizeName(personToCheck.LastName);
            var normalizedFirstName = NameNormalizer.NormalizeName(personToCheck.FirstName);
            var normalizedPatronymic = NameNormalizer.NormalizeName(personToCheck.Patronymic ?? "");

            // --- Точное совпадение ---
            var exactMatch = wantedPersons.FirstOrDefault(wp =>
                wp.LastName.ToUpper() == personToCheck.LastName.ToUpper() &&
                wp.FirstName.ToUpper() == personToCheck.FirstName.ToUpper() &&
                (wp.Patronymic ?? "").ToUpper() == (personToCheck.Patronymic ?? "").ToUpper() &&
                wp.Dob == personToCheck.Dob);

            if (exactMatch != null)
            {
                matches.Add(BuildMatchMessage("!!! ПОЛНОЕ СОВПАДЕНИЕ ДАННЫХ !!!", exactMatch));
            }
            else // --- Частичное (нечеткое) совпадение ---
            {
                foreach (var wp in wantedPersons)
                {
                    var dbNormLastName = NameNormalizer.NormalizeName(wp.LastName);
                    var dbNormFirstName = NameNormalizer.NormalizeName(wp.FirstName);
                    var dbNormPatronymic = NameNormalizer.NormalizeName(wp.Patronymic ?? "");

                    // Критерий 1: Совпадение Фамилии и Имени
                    if (dbNormLastName == normalizedLastName && dbNormFirstName == normalizedFirstName)
                        matches.Add(BuildMatchMessage("Совпадение Фамилии и Имени", wp));
                    // Критерий 2: Совпадение ФИО
                    else if (dbNormLastName == normalizedLastName && dbNormFirstName == normalizedFirstName && dbNormPatronymic == normalizedPatronymic)
                        matches.Add(BuildMatchMessage("Совпадение ФИО", wp));
                    // Критерий 3: Совпадение Имени и Отчества
                    else if (dbNormFirstName == normalizedFirstName && dbNormPatronymic == normalizedPatronymic && !string.IsNullOrEmpty(normalizedPatronymic))
                        matches.Add(BuildMatchMessage("Совпадение Имени и Отчества", wp));
                    // Критерий 4: Совпадение Фамилии и Даты рождения
                    else if (dbNormLastName == normalizedLastName && wp.Dob == personToCheck.Dob)
                        matches.Add(BuildMatchMessage("Совпадение Фамилии и Даты рождения", wp));
                }
            }

            if (matches.Any())
            {
                var finalMessage = new StringBuilder();
                finalMessage.AppendLine("Обнаружены следующие совпадения в списке розыска:\n");
                finalMessage.AppendLine(string.Join("\n----------------------------------\n", matches.Distinct()));
                finalMessage.AppendLine("\nПродолжить сохранение пересечения?");
                return new SecurityCheckResult { IsAllowed = false, Message = finalMessage.ToString() };
            }

            return new SecurityCheckResult { IsAllowed = true };
        }

        private string BuildMatchMessage(string reason, WantedPerson wp)
        {
            return $"Причина: {reason}\n" +
                   $"ФИО в базе: {wp.LastName} {wp.FirstName} {wp.Patronymic}\n" +
                   $"Дата рождения: {wp.Dob}\n" +
                   $"Информация: {wp.Info}\n" +
                   $"Предписанные действия: {wp.Actions}";
        }

        private async Task<SecurityCheckResult> CheckWatchlistAsync(Person personToCheck)
        {
            var watchlist = await _databaseService.GetWatchlistPersonsAsync();
            var match = watchlist.FirstOrDefault(p =>
                p.LastName.ToUpper() == personToCheck.LastName.ToUpper() &&
                p.FirstName.ToUpper() == personToCheck.FirstName.ToUpper() &&
                p.Dob == personToCheck.Dob);

            if (match != null)
            {
                var message = $"Лицо найдено в списке наблюдения.\n\n" +
                              $"ФИО: {match.LastName} {match.FirstName} {match.Patronymic}\n" +
                              $"Дата рождения: {match.Dob}\n" +
                              $"Причина: {match.Reason}\n\n" +
                              "Продолжить сохранение?";
                return new SecurityCheckResult { IsAllowed = false, Message = message };
            }

            return new SecurityCheckResult { IsAllowed = true };
        }
    }
}



================================================
FILE: CheckpointApp/ViewModels/AnalyticsViewModel.cs
================================================
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using CheckpointApp.DataAccess;
using CheckpointApp.Models;
using ScottPlot;
using ScottPlot.WPF;

namespace CheckpointApp.ViewModels
{
    public partial class AnalyticsViewModel : ObservableObject
    {
        private readonly DatabaseService _databaseService;
        private List<Crossing> _crossingsData;

        private WpfPlot? _dynamicsPlot, _citizenshipPiePlot, _topCitizenshipBarPlot, _heatmapPlot, _operatorsPlot;

        [ObservableProperty]
        private DateTime _startDate;
        [ObservableProperty]
        private DateTime _endDate;
        [ObservableProperty]
        private string _statusText = string.Empty;
        [ObservableProperty]
        private string _summaryText = "Выберите период и сформируйте отчет.";

        public AnalyticsViewModel(DatabaseService databaseService)
        {
            _databaseService = databaseService;
            EndDate = DateTime.Today;
            StartDate = EndDate.AddMonths(-1);
            _crossingsData = new List<Crossing>();
        }

        public void InitializePlots(WpfPlot dyn, WpfPlot pie, WpfPlot bar, WpfPlot heat, WpfPlot ops)
        {
            _dynamicsPlot = dyn;
            _citizenshipPiePlot = pie;
            _topCitizenshipBarPlot = bar;
            _heatmapPlot = heat;
            _operatorsPlot = ops;
        }

        [RelayCommand]
        private async Task GenerateReport()
        {
            StatusText = "Загрузка данных...";
            _crossingsData = (await _databaseService.GetCrossingsByDateRangeAsync(StartDate, EndDate)).ToList();
            StatusText = $"Данные загружены. Обработано {_crossingsData.Count} записей.";

            if (!_crossingsData.Any())
            {
                ClearAllPlots();
                SummaryText = "За выбранный период нет данных.";
                return;
            }

            GenerateSummary();
            GenerateDynamicsPlot();
            GenerateGeographyPlots();
            GenerateHeatmapPlot();
            GenerateOperatorsPlot();
        }

        private void ClearAllPlots()
        {
            _dynamicsPlot?.Plot.Clear(); _dynamicsPlot?.Refresh();
            _citizenshipPiePlot?.Plot.Clear(); _citizenshipPiePlot?.Refresh();
            _topCitizenshipBarPlot?.Plot.Clear(); _topCitizenshipBarPlot?.Refresh();
            _heatmapPlot?.Plot.Clear(); _heatmapPlot?.Refresh();
            _operatorsPlot?.Plot.Clear(); _operatorsPlot?.Refresh();
        }

        private void GenerateSummary()
        {
            var totalCrossings = _crossingsData.Count;
            var uniquePersons = _crossingsData.Select(c => c.PersonId).Distinct().Count();
            var days = (EndDate - StartDate).Days + 1;
            var avgPerDay = (days > 0) ? Math.Round((double)totalCrossings / days, 1) : totalCrossings;

            var peakDay = _crossingsData
                .GroupBy(c => DateTime.Parse(c.Timestamp).Date)
                .OrderByDescending(g => g.Count())
                .FirstOrDefault();

            var sb = new StringBuilder();
            sb.AppendLine($"Анализ за период: с {StartDate:dd.MM.yyyy} по {EndDate:dd.MM.yyyy}\n");
            sb.AppendLine($"- Общее количество пересечений: {totalCrossings}");
            sb.AppendLine($"- Уникальных лиц: {uniquePersons}");
            sb.AppendLine($"- Среднесуточное количество пересечений: {avgPerDay}");
            if (peakDay != null)
            {
                sb.AppendLine($"- Пиковый день: {peakDay.Key:dd.MM.yyyy} ({peakDay.Count()} пересечений)");
            }
            SummaryText = sb.ToString();
        }

        private void GenerateDynamicsPlot()
        {
            if (_dynamicsPlot == null) return;
            var plot = _dynamicsPlot.Plot;
            plot.Clear();

            var entries = _crossingsData.Where(c => c.Direction == "ВЪЕЗД")
                .GroupBy(c => DateTime.Parse(c.Timestamp).Date)
                .ToDictionary(g => g.Key, g => g.Count());

            var exits = _crossingsData.Where(c => c.Direction == "ВЫЕЗД")
                .GroupBy(c => DateTime.Parse(c.Timestamp).Date)
                .ToDictionary(g => g.Key, g => g.Count());

            var allDates = entries.Keys.Union(exits.Keys).OrderBy(d => d).ToArray();
            if (!allDates.Any()) return;

            var entryValues = allDates.Select(d => (double)(entries.ContainsKey(d) ? entries[d] : 0)).ToArray();
            var exitValues = allDates.Select(d => (double)(exits.ContainsKey(d) ? exits[d] : 0)).ToArray();

            plot.Add.Bars(entryValues).Label = "Въезд";
            plot.Add.Bars(exitValues).Label = "Выезд";

            plot.Axes.Bottom.TickGenerator = new ScottPlot.TickGenerators.DateTimeAutomatic();
            plot.Title("Динамика пересечений по дням");
            plot.Legend.IsVisible = true;
            plot.Legend.Location = Alignment.UpperRight;
            _dynamicsPlot.Refresh();
        }

        private void GenerateGeographyPlots()
        {
            if (_citizenshipPiePlot == null || _topCitizenshipBarPlot == null) return;
            var byCitizenship = _crossingsData
                .GroupBy(c => c.Citizenship ?? "НЕ УКАЗАНО")
                .Select(g => new { Citizenship = g.Key, Count = g.Count() })
                .OrderByDescending(x => x.Count)
                .ToList();

            // Круговая диаграмма
            var piePlot = _citizenshipPiePlot.Plot;
            piePlot.Clear();
            var top5 = byCitizenship.Take(5).ToList();
            var othersCount = byCitizenship.Skip(5).Sum(x => x.Count);

            List<PieSlice> slices = new();
            foreach (var item in top5)
            {
                slices.Add(new PieSlice() { Value = item.Count, Label = item.Citizenship });
            }
            if (othersCount > 0)
            {
                slices.Add(new PieSlice() { Value = othersCount, Label = "ДРУГИЕ" });
            }
            piePlot.Add.Pie(slices);
            piePlot.Title("Распределение по гражданству");
            _citizenshipPiePlot.Refresh();

            // Столбчатая диаграмма
            var barPlot = _topCitizenshipBarPlot.Plot;
            barPlot.Clear();
            var top15 = byCitizenship.Take(15).Reverse().ToList();
            var barValues = top15.Select(x => (double)x.Count).ToArray();

            var bars = barPlot.Add.Bars(barValues);
            // --- ИСПРАВЛЕНО: Orientation заменено на Horizontal ---
            bars.Horizontal = true;

            var ticks = top15.Select((item, index) => new Tick(index, item.Citizenship)).ToArray();
            barPlot.Axes.Left.TickGenerator = new ScottPlot.TickGenerators.NumericManual(ticks);
            barPlot.Axes.Left.MajorTickStyle.Length = 0;
            barPlot.Title("Топ-15 национальностей");
            _topCitizenshipBarPlot.Refresh();
        }

        private void GenerateHeatmapPlot()
        {
            if (_heatmapPlot == null) return;
            var plot = _heatmapPlot.Plot;
            plot.Clear();

            double[,] intensities = new double[7, 24];
            foreach (var crossing in _crossingsData)
            {
                var dt = DateTime.Parse(crossing.Timestamp);
                int dayOfWeek = ((int)dt.DayOfWeek + 6) % 7;
                int hour = dt.Hour;
                intensities[dayOfWeek, hour]++;
            }

            plot.Add.Heatmap(intensities);
            var yTicks = new Tick[]
            {
                new (0, "Пн"), new (1, "Вт"), new (2, "Ср"), new (3, "Чт"),
                new (4, "Пт"), new (5, "Сб"), new (6, "Вс")
            };
            plot.Axes.Left.TickGenerator = new ScottPlot.TickGenerators.NumericManual(yTicks);
            plot.Title("Тепловая карта нагрузки по времени");
            _heatmapPlot.Refresh();
        }

        private void GenerateOperatorsPlot()
        {
            if (_operatorsPlot == null) return;
            var plot = _operatorsPlot.Plot;
            plot.Clear();

            var byOperator = _crossingsData
                .GroupBy(c => c.OperatorUsername ?? "N/A")
                .Select(g => new { Operator = g.Key, Count = g.Count() })
                .OrderBy(x => x.Count)
                .ToList();

            var values = byOperator.Select(x => (double)x.Count).ToArray();

            var bars = plot.Add.Bars(values);
            // --- ИСПРАВЛЕНО: Orientation заменено на Horizontal ---
            bars.Horizontal = true;

            var ticks = byOperator.Select((item, index) => new Tick(index, item.Operator)).ToArray();
            plot.Axes.Left.TickGenerator = new ScottPlot.TickGenerators.NumericManual(ticks);
            plot.Axes.Left.MajorTickStyle.Length = 0;
            plot.Title("Рейтинг операторов");
            _operatorsPlot.Refresh();
        }
    }
}



================================================
FILE: CheckpointApp/ViewModels/FirstAdminViewModel.cs
================================================
[Binary file]


================================================
FILE: CheckpointApp/ViewModels/GoodsViewModel.cs
================================================
[Binary file]


================================================
FILE: CheckpointApp/ViewModels/LoginViewModel.cs
================================================
﻿using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using CheckpointApp.DataAccess;
using CheckpointApp.Helpers;
using CheckpointApp.Models;
using CheckpointApp.Views;

namespace CheckpointApp.ViewModels
{
    public partial class LoginViewModel : ObservableObject
    {
        private readonly DatabaseService _databaseService;

        [ObservableProperty]
        private string _username;

        [ObservableProperty]
        private string _errorMessage;

        public User LoggedInUser { get; private set; }

        public LoginViewModel(DatabaseService databaseService)
        {
            _databaseService = databaseService;
        }

        [RelayCommand]
        private async Task Login(PasswordBox passwordBox)
        {
            var password = passwordBox.Password;

            if (string.IsNullOrWhiteSpace(Username) || string.IsNullOrWhiteSpace(password))
            {
                ErrorMessage = "Введите имя пользователя и пароль.";
                return;
            }

            var user = await _databaseService.GetUserByUsernameAsync(Username);

            if (user != null && PasswordHelper.VerifyPassword(password, user.PasswordHash))
            {
                LoggedInUser = user;
                // Успешный вход
                Application.Current.Windows.OfType<Window>().SingleOrDefault(w => w.IsActive).DialogResult = true;
            }
            else
            {
                ErrorMessage = "Неверное имя пользователя или пароль.";
            }
        }

        [RelayCommand]
        private void Register()
        {
            // Открываем окно регистрации нового оператора (без прав администратора)
            var registrationWindow = new RegistrationWindow();
            var registrationViewModel = new RegistrationViewModel(_databaseService);
            registrationWindow.DataContext = registrationViewModel;
            registrationWindow.ShowDialog();
        }
    }
}



================================================
FILE: CheckpointApp/ViewModels/MainViewModel.cs
================================================
﻿using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Data;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using CheckpointApp.DataAccess;
using CheckpointApp.Models;
using CheckpointApp.Services;
using CheckpointApp.Views;
using Microsoft.Win32;

namespace CheckpointApp.ViewModels
{
    public partial class MainViewModel : ObservableObject
    {
        private readonly DatabaseService _databaseService;
        private readonly SecurityService _securityService;
        private readonly User _currentUser;
        private readonly ExcelExportService _excelExportService;
        private CancellationTokenSource? _filterCts;
        public ObservableCollection<TempGood> TemporaryGoodsList { get; set; }
        [ObservableProperty] private ObservableCollection<Crossing> _allCrossings;
        public ICollectionView CrossingsView { get; }
        [ObservableProperty] private Person _currentPerson;
        [ObservableProperty] private DateTime? _currentPersonDob;
        [ObservableProperty] private Crossing _currentCrossing;
        [ObservableProperty] private Vehicle _currentVehicle;
        public List<string> CrossingTypes { get; } = new List<string> { "ПЕШКОМ", "ВОДИТЕЛЬ", "ПАССАЖИР" };
        [ObservableProperty][NotifyPropertyChangedFor(nameof(IsVehicleInfoEnabled))] private string _selectedCrossingType;
        public bool IsVehicleInfoEnabled => SelectedCrossingType != "ПЕШКОМ";
        public bool IsDirectionIn { get => CurrentCrossing.Direction == "ВЪЕЗД"; set { if (value) CurrentCrossing.Direction = "ВЪЕЗД"; OnPropertyChanged(); } }
        public bool IsDirectionOut { get => CurrentCrossing.Direction == "ВЫЕЗД"; set { if (value) CurrentCrossing.Direction = "ВЫЕЗД"; OnPropertyChanged(); } }
        [ObservableProperty] private string _windowTitle;
        [ObservableProperty] private string _statusMessage;
        [ObservableProperty] private bool _isAdmin;

        public MainViewModel(DatabaseService databaseService, User currentUser)
        {
            _databaseService = databaseService;
            _securityService = new SecurityService(databaseService);
            _currentUser = currentUser;
            _excelExportService = new ExcelExportService();
            _allCrossings = new ObservableCollection<Crossing>();
            CrossingsView = CollectionViewSource.GetDefaultView(_allCrossings);
            CrossingsView.Filter = FilterCrossings;
            IsAdmin = _currentUser.IsAdmin;
            WindowTitle = $"Контрольный пункт | Пользователь: {_currentUser.Username} ({(_currentUser.IsAdmin ? "Администратор" : "Оператор")})";
            TemporaryGoodsList = new ObservableCollection<TempGood>();
            _currentPerson = new Person();
            _currentCrossing = new Crossing();
            _currentVehicle = new Vehicle();
            _selectedCrossingType = CrossingTypes[0];
            _windowTitle = "";
            _statusMessage = "";
            InitializeNewEntry();
            _ = LoadInitialData();
        }

        private bool FilterCrossings(object obj)
        {
            if (obj is not Crossing crossing) return false;
            var lastNameFilter = CurrentPerson.LastName?.Trim();
            var firstNameFilter = CurrentPerson.FirstName?.Trim();
            var passportFilter = CurrentPerson.PassportData?.Trim();
            if (string.IsNullOrWhiteSpace(lastNameFilter) && string.IsNullOrWhiteSpace(firstNameFilter) && string.IsNullOrWhiteSpace(passportFilter)) return true;
            bool match = true;
            if (!string.IsNullOrWhiteSpace(lastNameFilter)) match &= crossing.FullName.StartsWith(lastNameFilter, StringComparison.OrdinalIgnoreCase);
            if (!string.IsNullOrWhiteSpace(firstNameFilter)) match &= crossing.FullName.Contains(firstNameFilter, StringComparison.OrdinalIgnoreCase);
            if (!string.IsNullOrWhiteSpace(passportFilter)) match &= crossing.PersonPassport.StartsWith(passportFilter, StringComparison.OrdinalIgnoreCase);
            return match;
        }

        private async void OnCurrentPersonPropertyChanged(object? sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(Person.LastName) || e.PropertyName == nameof(Person.FirstName) || e.PropertyName == nameof(Person.PassportData))
            {
                _filterCts?.Cancel();
                _filterCts = new CancellationTokenSource();
                try
                {
                    await Task.Delay(300, _filterCts.Token);
                    Application.Current.Dispatcher.Invoke(() => CrossingsView.Refresh());
                }
                catch (TaskCanceledException) { /* Ignore */ }
            }
        }

        partial void OnSelectedCrossingTypeChanged(string value)
        {
            CurrentCrossing.CrossingType = value;
            if (!IsVehicleInfoEnabled)
            {
                CurrentVehicle = new Vehicle();
            }
        }

        private void InitializeNewEntry()
        {
            if (CurrentPerson != null)
            {
                CurrentPerson.PropertyChanged -= OnCurrentPersonPropertyChanged;
            }

            CurrentPerson = new Person();
            CurrentCrossing = new Crossing { Direction = "ВЪЕЗД" };
            CurrentVehicle = new Vehicle();
            CurrentPersonDob = null;
            SelectedCrossingType = CrossingTypes[0];
            CurrentPerson.PropertyChanged += OnCurrentPersonPropertyChanged;

            // --- Инициализируем/очищаем список товаров ---
            TemporaryGoodsList = new ObservableCollection<TempGood>();

            StatusMessage = "Готов к работе.";
            CrossingsView.Refresh();
        }

        private async Task LoadInitialData()
        {
            StatusMessage = "Загрузка данных...";
            var crossings = await _databaseService.GetAllCrossingsAsync();
            AllCrossings.Clear();
            foreach (var crossing in crossings)
            {
                AllCrossings.Add(crossing);
            }
            StatusMessage = $"Загружено {AllCrossings.Count} записей.";
        }

        [RelayCommand]
        private async Task SaveCrossing()
        {
            if (string.IsNullOrWhiteSpace(CurrentPerson.LastName) ||
                string.IsNullOrWhiteSpace(CurrentPerson.FirstName) ||
                string.IsNullOrWhiteSpace(CurrentPerson.PassportData) ||
                CurrentPersonDob == null)
            {
                MessageBox.Show("Заполните обязательные поля: Фамилия, Имя, Паспорт, Дата рождения.", "Ошибка валидации", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }
            if (IsDirectionIn && string.IsNullOrWhiteSpace(CurrentCrossing.DestinationTown))
            {
                MessageBox.Show("Для направления 'Въезд' необходимо указать населенный пункт следования.", "Ошибка валидации", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }
            CurrentPerson.Dob = CurrentPersonDob.Value.ToString("dd.MM.yyyy");

            var securityResult = await _securityService.PerformChecksAsync(CurrentPerson);
            if (!securityResult.IsAllowed)
            {
                StatusMessage = "Операция сохранения отменена оператором.";
                return;
            }

            StatusMessage = "Сохранение...";
            try
            {
                CurrentPerson.LastName = CurrentPerson.LastName.ToUpper();
                CurrentPerson.FirstName = CurrentPerson.FirstName.ToUpper();
                CurrentPerson.Patronymic = CurrentPerson.Patronymic?.ToUpper();
                CurrentPerson.PassportData = CurrentPerson.PassportData.ToUpper();
                CurrentPerson.Citizenship = CurrentPerson.Citizenship?.ToUpper() ?? "";
                CurrentCrossing.Purpose = CurrentCrossing.Purpose?.ToUpper();
                CurrentCrossing.DestinationTown = CurrentCrossing.DestinationTown?.ToUpper();
                CurrentVehicle.Make = CurrentVehicle.Make?.ToUpper() ?? "";
                CurrentVehicle.LicensePlate = CurrentVehicle.LicensePlate?.ToUpper() ?? "";

                var person = await _databaseService.FindPersonByPassportAsync(CurrentPerson.PassportData);
                int personId;
                if (person == null)
                {
                    personId = await _databaseService.CreatePersonAsync(CurrentPerson);
                }
                else
                {
                    // --- ИСПРАВЛЕНО: person.ID заменено на person.Id ---
                    personId = person.Id;
                }

                int? vehicleId = null;
                if (IsVehicleInfoEnabled && !string.IsNullOrWhiteSpace(CurrentVehicle.LicensePlate))
                {
                    var vehicle = await _databaseService.FindVehicleByLicensePlateAsync(CurrentVehicle.LicensePlate);
                    vehicleId = vehicle?.ID ?? await _databaseService.CreateVehicleAsync(CurrentVehicle);
                }

                CurrentCrossing.PersonId = personId;
                CurrentCrossing.VehicleId = vehicleId;
                CurrentCrossing.OperatorId = _currentUser.ID;
                CurrentCrossing.Timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");

                int newCrossingId = await _databaseService.CreateCrossingAsync(CurrentCrossing);

                if (TemporaryGoodsList.Any())
                {
                    var goodsToSave = TemporaryGoodsList.Select(g => new Good
                    {
                        CrossingId = newCrossingId,
                        Description = g.Description,
                        Quantity = g.Quantity,
                        Unit = g.Unit
                    });
                    await _databaseService.AddGoodsAsync(goodsToSave);
                }

                StatusMessage = $"Пересечение ID: {newCrossingId} успешно сохранено.";
                ClearForm();
                await LoadInitialData();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Произошла ошибка при сохранении: {ex.Message}", "Ошибка БД", MessageBoxButton.OK, MessageBoxImage.Error);
                StatusMessage = "Ошибка сохранения.";
            }
        }

        // --- НОВАЯ КОМАНДА: Показать окно товаров ---
        [RelayCommand]
        private void ShowGoodsWindow()
        {
            var goodsWindow = new GoodsWindow();
            // Устанавливаем владельца, чтобы окно было модальным относительно главного
            goodsWindow.Owner = Application.Current.MainWindow;
            var viewModel = new GoodsViewModel(TemporaryGoodsList);
            goodsWindow.DataContext = viewModel;
            goodsWindow.ShowDialog();
        }

        [RelayCommand]
        private void ClearForm()
        {
            InitializeNewEntry();
        }

        [RelayCommand]
        private async Task RefreshData()
        {
            await LoadInitialData();
        }

        [RelayCommand]
        private void Exit()
        {
            Application.Current.Shutdown();
        }
        [RelayCommand]
        private void ManageWantedList()
        {
            var window = new WantedListManagementWindow
            {
                Owner = Application.Current.MainWindow,
                DataContext = new WantedListManagementViewModel(_databaseService)
            };
            window.ShowDialog();
        }
        [RelayCommand]
        private void ManageWatchlist()
        {
            var window = new WatchlistManagementWindow
            {
                Owner = Application.Current.MainWindow,
                DataContext = new WatchlistManagementViewModel(_databaseService)
            };
            window.ShowDialog();
        }
        [RelayCommand]
        private void ManageUsers()
        {
            var window = new UserManagementWindow
            {
                Owner = Application.Current.MainWindow,
                // Передаем текущего пользователя, чтобы ViewModel мог проверить права на удаление
                DataContext = new UserManagementViewModel(_databaseService, _currentUser)
            };
            window.ShowDialog();
        }
        [RelayCommand]
        private void ShowPeopleInZone()
        {
            var window = new PeopleInZoneWindow
            {
                Owner = Application.Current.MainWindow,
                DataContext = new PeopleInZoneViewModel(_databaseService)
            };
            window.ShowDialog();
        }
        [RelayCommand]
        private void ShowAnalytics()
        {
            var window = new AnalyticsWindow
            {
                Owner = Application.Current.MainWindow,
                DataContext = new AnalyticsViewModel(_databaseService)
            };
            window.Show(); // Показываем как немодальное, чтобы можно было работать с основным окном
        }
        [RelayCommand]
        private async Task ExportToExcel()
        {
            var saveFileDialog = new SaveFileDialog
            {
                Filter = "Excel Workbook (*.xlsx)|*.xlsx",
                FileName = $"Журнал_пересечений_{DateTime.Now:yyyyMMdd_HHmm}.xlsx",
                Title = "Сохранить журнал в Excel"
            };

            if (saveFileDialog.ShowDialog() == true)
            {
                StatusMessage = "Экспорт данных в Excel... Пожалуйста, подождите.";
                try
                {
                    // Получаем отфильтрованные и отсортированные данные прямо из View
                    var dataToExport = CrossingsView.Cast<Crossing>().ToList();

                    await _excelExportService.ExportCrossingsAsync(dataToExport, saveFileDialog.FileName);

                    StatusMessage = $"Экспорт успешно завершен. Файл сохранен: {saveFileDialog.FileName}";
                    MessageBox.Show("Данные успешно экспортированы.", "Успех", MessageBoxButton.OK, MessageBoxImage.Information);
                }
                catch (Exception ex)
                {
                    StatusMessage = "Ошибка при экспорте.";
                    MessageBox.Show($"Произошла ошибка во время экспорта: {ex.Message}", "Ошибка экспорта", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }
    }
}



================================================
FILE: CheckpointApp/ViewModels/PeopleInZoneViewModel.cs
================================================
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using CheckpointApp.DataAccess;
using CheckpointApp.Models;

namespace CheckpointApp.ViewModels
{
    using GroupedPersonsCollection = Dictionary<string, List<PersonInZone>>;
    public partial class PeopleInZoneViewModel : ObservableObject
    {
        private readonly DatabaseService _databaseService;
        [ObservableProperty] private GroupedPersonsCollection _groupedPersons;
        [ObservableProperty] private string _statusText;
        public PeopleInZoneViewModel(DatabaseService databaseService)
        {
            _databaseService = databaseService;
            _groupedPersons = new GroupedPersonsCollection();
            _statusText = "";
            _ = LoadDataAsync();
        }

        [RelayCommand]
        private async Task LoadData()
        {
            await LoadDataAsync();
        }

        private async Task LoadDataAsync()
        {
            var persons = await _databaseService.GetPersonsInZoneAsync();
            var personList = persons.ToList();

            // Группируем данные по DestinationTown
            var grouped = personList
                .GroupBy(p => p.DestinationTown ?? "НЕ УКАЗАНО")
                .ToDictionary(g => g.Key, g => g.ToList());

            GroupedPersons = new GroupedPersonsCollection(grouped);

            StatusText = $"Всего в погранзоне: {personList.Count} чел. | Обновлено: {DateTime.Now:G}";
        }
    }
}



================================================
FILE: CheckpointApp/ViewModels/RegistrationViewModel.cs
================================================
﻿using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using CheckpointApp.DataAccess;
using CheckpointApp.Helpers;
using CheckpointApp.Models;

namespace CheckpointApp.ViewModels
{
    public partial class RegistrationViewModel : ObservableObject
    {
        private readonly DatabaseService _databaseService;

        [ObservableProperty]
        private string _username;

        [ObservableProperty]
        private string _errorMessage;

        public RegistrationViewModel(DatabaseService databaseService)
        {
            _databaseService = databaseService;
        }

        [RelayCommand]
        private async Task RegisterUser(PasswordBox passwordBox)
        {
            var password = passwordBox.Password;

            if (string.IsNullOrWhiteSpace(Username) || string.IsNullOrWhiteSpace(password))
            {
                ErrorMessage = "Имя пользователя и пароль не могут быть пустыми.";
                return;
            }

            // Проверяем, не занято ли имя пользователя
            var existingUser = await _databaseService.GetUserByUsernameAsync(Username);
            if (existingUser != null)
            {
                ErrorMessage = "Это имя пользователя уже занято.";
                return;
            }

            var newUser = new User
            {
                Username = Username.ToUpper(),
                PasswordHash = PasswordHelper.HashPassword(password),
                IsAdmin = false // Новые пользователи по умолчанию не администраторы
            };

            bool success = await _databaseService.AddUserAsync(newUser);

            if (success)
            {
                MessageBox.Show("Новый оператор успешно зарегистрирован.", "Успех", MessageBoxButton.OK, MessageBoxImage.Information);
                Application.Current.Windows.OfType<Window>().SingleOrDefault(w => w.IsActive)?.Close();
            }
            else
            {
                ErrorMessage = "Произошла ошибка при регистрации.";
            }
        }
    }
}



================================================
FILE: CheckpointApp/ViewModels/UserManagementViewModel.cs
================================================
﻿using System.Collections.ObjectModel;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using CheckpointApp.DataAccess;
using CheckpointApp.Helpers;
using CheckpointApp.Models;

namespace CheckpointApp.ViewModels
{
    public partial class UserManagementViewModel : ObservableObject
    {
        private readonly DatabaseService _databaseService;
        private readonly User _currentUser;
        [ObservableProperty] private ObservableCollection<User> _users;
        [ObservableProperty] private User? _selectedUser;
        [ObservableProperty] private string _newUsername;
        [ObservableProperty] private bool _isNewUserAdmin;
        public UserManagementViewModel(DatabaseService databaseService, User currentUser)
        {
            _databaseService = databaseService;
            _currentUser = currentUser;
            _users = new ObservableCollection<User>();
            _newUsername = "";
            _ = LoadUsersAsync();
        }

        private async Task LoadUsersAsync()
        {
            var userList = await _databaseService.GetAllUsersAsync();
            Users = new ObservableCollection<User>(userList);
        }

        [RelayCommand]
        private async Task AddUser(PasswordBox passwordBox)
        {
            var password = passwordBox.Password;
            if (string.IsNullOrWhiteSpace(NewUsername) || string.IsNullOrWhiteSpace(password))
            {
                MessageBox.Show("Имя пользователя и пароль не могут быть пустыми.", "Ошибка", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            var existingUser = await _databaseService.GetUserByUsernameAsync(NewUsername);
            if (existingUser != null)
            {
                MessageBox.Show("Пользователь с таким именем уже существует.", "Ошибка", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }

            var newUser = new User
            {
                Username = NewUsername.ToUpper(),
                PasswordHash = PasswordHelper.HashPassword(password),
                IsAdmin = IsNewUserAdmin
            };

            await _databaseService.AddUserAsync(newUser);
            MessageBox.Show("Новый пользователь успешно добавлен.", "Успех", MessageBoxButton.OK, MessageBoxImage.Information);

            // Очистка и обновление
            NewUsername = string.Empty;
            passwordBox.Clear();
            IsNewUserAdmin = false;
            await LoadUsersAsync();
        }

        [RelayCommand]
        private async Task DeleteUser()
        {
            if (SelectedUser == null)
            {
                MessageBox.Show("Выберите пользователя для удаления.", "Внимание", MessageBoxButton.OK, MessageBoxImage.Information);
                return;
            }

            // --- Ключевая проверка: запрет на удаление самого себя ---
            if (SelectedUser.ID == _currentUser.ID)
            {
                MessageBox.Show("Вы не можете удалить свою собственную учетную запись.", "Действие запрещено", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }

            var result = MessageBox.Show($"Вы уверены, что хотите удалить пользователя '{SelectedUser.Username}'?",
                                         "Подтверждение удаления", MessageBoxButton.YesNo, MessageBoxImage.Question);

            if (result == MessageBoxResult.Yes)
            {
                await _databaseService.DeleteUserAsync(SelectedUser.ID);
                await LoadUsersAsync();
            }
        }
    }
}



================================================
FILE: CheckpointApp/ViewModels/WantedListManagementViewModel.cs
================================================
﻿using System;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using System.Windows;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using CheckpointApp.DataAccess;
using CheckpointApp.Models;
using DocumentFormat.OpenXml.Wordprocessing;

namespace CheckpointApp.ViewModels
{
    public partial class WantedListManagementViewModel : ObservableObject
    {
        private readonly DatabaseService _databaseService;

        [ObservableProperty]
        private ObservableCollection<WantedPerson> _wantedPersons;

        [ObservableProperty]
        private WantedPerson _newWantedPerson;

        [ObservableProperty]
        private DateTime? _newWantedPersonDob;

        [ObservableProperty]
        private WantedPerson _selectedPerson;

        [ObservableProperty]
        private string _statusText;

        public WantedListManagementViewModel(DatabaseService databaseService)
        {
            _databaseService = databaseService;
            NewWantedPerson = new WantedPerson();
            _ = LoadDataAsync();
        }

        private async Task LoadDataAsync()
        {
            var persons = await _databaseService.GetWantedPersonsAsync();
            WantedPersons = new ObservableCollection<WantedPerson>(persons);
            UpdateStatus();
        }

        private void UpdateStatus()
        {
            StatusText = $"Всего в списке: {WantedPersons.Count} чел. | Последнее обновление: {DateTime.Now:G}";
        }

        [RelayCommand]
        private async Task AddPerson()
        {
            if (string.IsNullOrWhiteSpace(NewWantedPerson.LastName) ||
                string.IsNullOrWhiteSpace(NewWantedPerson.FirstName) ||
                NewWantedPersonDob == null)
            {
                MessageBox.Show("Поля 'Фамилия', 'Имя' и 'Дата рождения' обязательны для заполнения.", "Ошибка", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            NewWantedPerson.Dob = NewWantedPersonDob.Value.ToString("dd.MM.yyyy");
            NewWantedPerson.LastName = NewWantedPerson.LastName.ToUpper();
            NewWantedPerson.FirstName = NewWantedPerson.FirstName.ToUpper();
            NewWantedPerson.Patronymic = NewWantedPerson.Patronymic?.ToUpper();

            await _databaseService.AddWantedPersonAsync(NewWantedPerson);
            MessageBox.Show("Запись успешно добавлена.", "Успех", MessageBoxButton.OK, MessageBoxImage.Information);

            ClearForm();
            await LoadDataAsync();
        }

        [RelayCommand]
        private async Task DeletePerson()
        {
            if (SelectedPerson == null)
            {
                MessageBox.Show("Выберите запись для удаления.", "Внимание", MessageBoxButton.OK, MessageBoxImage.Information);
                return;
            }

            var result = MessageBox.Show($"Вы уверены, что хотите удалить запись для '{SelectedPerson.LastName} {SelectedPerson.FirstName}'?",
                                         "Подтверждение удаления", MessageBoxButton.YesNo, MessageBoxImage.Question);

            if (result == MessageBoxResult.Yes)
            {
                await _databaseService.DeleteWantedPersonAsync(SelectedPerson.ID);
                await LoadDataAsync();
            }
        }

        [RelayCommand]
        private void ClearForm()
        {
            NewWantedPerson = new WantedPerson();
            NewWantedPersonDob = null;
        }
    }
}



================================================
FILE: CheckpointApp/ViewModels/WatchlistManagementViewModel.cs
================================================
﻿using System;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using System.Windows;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using CheckpointApp.DataAccess;
using CheckpointApp.Models;
using DocumentFormat.OpenXml.Wordprocessing;

namespace CheckpointApp.ViewModels
{
    public partial class WatchlistManagementViewModel : ObservableObject
    {
        private readonly DatabaseService _databaseService;

        [ObservableProperty]
        private ObservableCollection<WatchlistPerson> _watchlistPersons;

        [ObservableProperty]
        private WatchlistPerson _newWatchlistPerson;

        [ObservableProperty]
        private DateTime? _newWatchlistPersonDob;

        [ObservableProperty]
        private WatchlistPerson _selectedPerson;

        [ObservableProperty]
        private string _statusText;

        public WatchlistManagementViewModel(DatabaseService databaseService)
        {
            _databaseService = databaseService;
            NewWatchlistPerson = new WatchlistPerson();
            _ = LoadDataAsync();
        }

        private async Task LoadDataAsync()
        {
            var persons = await _databaseService.GetWatchlistPersonsAsync();
            WatchlistPersons = new ObservableCollection<WatchlistPerson>(persons);
            UpdateStatus();
        }

        private void UpdateStatus()
        {
            StatusText = $"Всего в списке: {WatchlistPersons.Count} чел. | Последнее обновление: {DateTime.Now:G}";
        }

        [RelayCommand]
        private async Task AddPerson()
        {
            if (string.IsNullOrWhiteSpace(NewWatchlistPerson.LastName) ||
                string.IsNullOrWhiteSpace(NewWatchlistPerson.FirstName) ||
                NewWatchlistPersonDob == null)
            {
                MessageBox.Show("Поля 'Фамилия', 'Имя' и 'Дата рождения' обязательны.", "Ошибка", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            NewWatchlistPerson.Dob = NewWatchlistPersonDob.Value.ToString("dd.MM.yyyy");
            NewWatchlistPerson.LastName = NewWatchlistPerson.LastName.ToUpper();
            NewWatchlistPerson.FirstName = NewWatchlistPerson.FirstName.ToUpper();
            NewWatchlistPerson.Patronymic = NewWatchlistPerson.Patronymic?.ToUpper();

            await _databaseService.AddWatchlistPersonAsync(NewWatchlistPerson);
            MessageBox.Show("Запись успешно добавлена.", "Успех", MessageBoxButton.OK, MessageBoxImage.Information);

            ClearForm();
            await LoadDataAsync();
        }

        [RelayCommand]
        private async Task DeletePerson()
        {
            if (SelectedPerson == null)
            {
                MessageBox.Show("Выберите запись для удаления.", "Внимание", MessageBoxButton.OK, MessageBoxImage.Information);
                return;
            }

            var result = MessageBox.Show($"Вы уверены, что хотите удалить запись для '{SelectedPerson.LastName} {SelectedPerson.FirstName}' из списка наблюдения?",
                                         "Подтверждение удаления", MessageBoxButton.YesNo, MessageBoxImage.Question);

            if (result == MessageBoxResult.Yes)
            {
                await _databaseService.DeleteWatchlistPersonAsync(SelectedPerson.ID);
                await LoadDataAsync();
            }
        }

        [RelayCommand]
        private void ClearForm()
        {
            NewWatchlistPerson = new WatchlistPerson();
            NewWatchlistPersonDob = null;
        }
    }
}



================================================
FILE: CheckpointApp/Views/AnalyticsWindow.xaml
================================================
<Window x:Class="CheckpointApp.Views.AnalyticsWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:ScottPlot="clr-namespace:ScottPlot.WPF;assembly=ScottPlot.WPF"
        mc:Ignorable="d"
        Title="Аналитика пограничных пересечений" Height="800" Width="1200"
        WindowStartupLocation="CenterOwner">
    <DockPanel>
        <Border DockPanel.Dock="Top" Padding="5" Margin="5" BorderBrush="Gray" BorderThickness="1">
            <StackPanel Orientation="Horizontal">
                <TextBlock Text="Период анализа:" VerticalAlignment="Center" Margin="5"/>
                <DatePicker SelectedDate="{Binding StartDate}" VerticalAlignment="Center" Margin="5"/>
                <TextBlock Text="-" VerticalAlignment="Center"/>
                <DatePicker SelectedDate="{Binding EndDate}" VerticalAlignment="Center" Margin="5"/>
                <Button Content="Сформировать отчет" Command="{Binding GenerateReportCommand}" Margin="20,5,5,5" Padding="10,2"/>
                <TextBlock Text="{Binding StatusText}" VerticalAlignment="Center" Margin="10,0" FontStyle="Italic"/>
            </StackPanel>
        </Border>

        <TabControl Margin="5">
            <TabItem Header="Общая сводка">
                <TextBlock Text="{Binding SummaryText}" Margin="15" FontSize="16" TextWrapping="Wrap"/>
            </TabItem>
            <TabItem Header="Динамика">
                <ScottPlot:WpfPlot Name="DynamicsPlot"/>
            </TabItem>
            <TabItem Header="География">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <ScottPlot:WpfPlot Name="CitizenshipPiePlot" Grid.Column="0"/>
                    <ScottPlot:WpfPlot Name="TopCitizenshipBarPlot" Grid.Column="1"/>
                </Grid>
            </TabItem>
            <TabItem Header="Нагрузка по времени">
                <ScottPlot:WpfPlot Name="HeatmapPlot"/>
            </TabItem>
            <TabItem Header="Рейтинг операторов">
                <ScottPlot:WpfPlot Name="OperatorsPlot"/>
            </TabItem>
        </TabControl>
    </DockPanel>
</Window>


================================================
FILE: CheckpointApp/Views/AnalyticsWindow.xaml.cs
================================================
﻿using System.Windows;
using CheckpointApp.ViewModels;

namespace CheckpointApp.Views
{
    public partial class AnalyticsWindow : Window
    {
        public AnalyticsWindow()
        {
            InitializeComponent();
            // Передаем контролы для графиков в ViewModel
            if (DataContext is AnalyticsViewModel vm)
            {
                vm.InitializePlots(DynamicsPlot, CitizenshipPiePlot, TopCitizenshipBarPlot, HeatmapPlot, OperatorsPlot);
            }
        }
    }
}



================================================
FILE: CheckpointApp/Views/FirstAdminWindow.xaml
================================================
<Window x:Class="CheckpointApp.Views.FirstAdminWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d"
        Title="Создание первого администратора" Height="300" Width="400"
        WindowStartupLocation="CenterScreen" ResizeMode="NoResize">
	<Grid Margin="15">
		<Grid.RowDefinitions>
			<RowDefinition Height="Auto"/>
			<RowDefinition Height="Auto"/>
			<RowDefinition Height="Auto"/>
			<RowDefinition Height="Auto"/>
			<RowDefinition Height="Auto"/>
			<RowDefinition Height="*"/>
			<RowDefinition Height="Auto"/>
		</Grid.RowDefinitions>
		<Grid.ColumnDefinitions>
			<ColumnDefinition Width="Auto"/>
			<ColumnDefinition Width="*"/>
		</Grid.ColumnDefinitions>

		<TextBlock Grid.Row="0" Grid.ColumnSpan="2" Text="Первый запуск системы" FontSize="16" FontWeight="Bold" Margin="0,0,0,10"/>
		<TextBlock Grid.Row="1" Grid.ColumnSpan="2" Text="Необходимо создать учетную запись администратора." TextWrapping="Wrap" Margin="0,0,0,20"/>

		<Label Grid.Row="2" Grid.Column="0" Content="Имя пользователя:" VerticalAlignment="Center"/>
		<TextBox Grid.Row="2" Grid.Column="1" Margin="5" VerticalAlignment="Center" Text="{Binding Username, UpdateSourceTrigger=PropertyChanged}"/>

		<Label Grid.Row="3" Grid.Column="0" Content="Пароль:" VerticalAlignment="Center"/>
		<PasswordBox x:Name="PasswordBox" Grid.Row="3" Grid.Column="1" Margin="5" VerticalAlignment="Center"/>

		<Label Grid.Row="4" Grid.Column="0" Content="Повторите пароль:" VerticalAlignment="Center"/>
		<PasswordBox x:Name="ConfirmPasswordBox" Grid.Row="4" Grid.Column="1" Margin="5" VerticalAlignment="Center"/>

		<TextBlock Grid.Row="5" Grid.Column="1" Text="{Binding ErrorMessage}" Foreground="Red" TextWrapping="Wrap" VerticalAlignment="Center"/>

		<StackPanel Grid.Row="6" Grid.Column="1" Orientation="Horizontal" HorizontalAlignment="Right">
			<Button Content="Создать" Width="100" Margin="5" IsDefault="True" Command="{Binding CreateAdminCommand}" CommandParameter="{Binding ElementName=PasswordBox}"/>
		</StackPanel>
	</Grid>
</Window>


================================================
FILE: CheckpointApp/Views/FirstAdminWindow.xaml.cs
================================================
﻿using System.Windows;

namespace CheckpointApp.Views
{
    public partial class FirstAdminWindow : Window
    {
        public FirstAdminWindow()
        {
            InitializeComponent();
        }
    }
}



================================================
FILE: CheckpointApp/Views/GoodsWindow.xaml
================================================
<Window x:Class="CheckpointApp.Views.GoodsWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        mc:Ignorable="d"
        Title="Товары и Грузы для текущего пересечения" Height="450" Width="600"
        WindowStartupLocation="CenterOwner" ResizeMode="NoResize">
	<Grid Margin="10">
		<Grid.RowDefinitions>
			<RowDefinition Height="Auto"/>
			<RowDefinition Height="*"/>
			<RowDefinition Height="Auto"/>
		</Grid.RowDefinitions>

		<GroupBox Header="Добавить товар" Grid.Row="0" Padding="5">
			<Grid>
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="*"/>
					<ColumnDefinition Width="Auto"/>
					<ColumnDefinition Width="Auto"/>
					<ColumnDefinition Width="Auto"/>
				</Grid.ColumnDefinitions>
				<Grid.RowDefinitions>
					<RowDefinition Height="Auto"/>
					<RowDefinition Height="Auto"/>
				</Grid.RowDefinitions>

				<Label Grid.Row="0" Grid.Column="0" Content="Наименование:"/>
				<TextBox Grid.Row="1" Grid.Column="0" Margin="2" Text="{Binding NewGoodDescription, UpdateSourceTrigger=PropertyChanged}"/>

				<Label Grid.Row="0" Grid.Column="1" Content="Кол-во:"/>
				<xctk:DoubleUpDown Grid.Row="1" Grid.Column="1" Margin="2" Width="80" Value="{Binding NewGoodQuantity}"/>

				<Label Grid.Row="0" Grid.Column="2" Content="Ед. изм.:"/>
				<ComboBox Grid.Row="1" Grid.Column="2" Margin="2" Width="80" IsEditable="True" Text="{Binding NewGoodUnit}" ItemsSource="{Binding CommonUnits}"/>

				<Button Grid.Row="1" Grid.Column="3" Content="Добавить" Width="100" Margin="10,2,2,2" VerticalAlignment="Center" Command="{Binding AddGoodCommand}"/>
			</Grid>
		</GroupBox>

		<ListView Grid.Row="1" Margin="0,10,0,0" ItemsSource="{Binding GoodsList}" SelectedItem="{Binding SelectedGood}">
			<ListView.View>
				<GridView>
					<GridViewColumn Header="Наименование" DisplayMemberBinding="{Binding Description}" Width="300"/>
					<GridViewColumn Header="Количество" DisplayMemberBinding="{Binding Quantity}"/>
					<GridViewColumn Header="Ед. изм." DisplayMemberBinding="{Binding Unit}"/>
				</GridView>
			</ListView.View>
		</ListView>

		<StackPanel Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,10,0,0">
			<Button Content="Удалить выбранное" Margin="5" Command="{Binding RemoveGoodCommand}"/>
			<Button Content="OK" Width="100" Margin="5" IsDefault="True" Click="OkButton_Click"/>
		</StackPanel>
	</Grid>
</Window>


================================================
FILE: CheckpointApp/Views/GoodsWindow.xaml.cs
================================================
﻿using System.Windows;

namespace CheckpointApp.Views
{
    public partial class GoodsWindow : Window
    {
        public GoodsWindow()
        {
            InitializeComponent();
        }

        private void OkButton_Click(object sender, RoutedEventArgs e)
        {
            this.DialogResult = true;
        }
    }
}



================================================
FILE: CheckpointApp/Views/LoginWindow.xaml
================================================
<Window x:Class="CheckpointApp.Views.LoginWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d"
        Title="Вход в систему 'Контрольный пункт'" Height="250" Width="400"
        WindowStartupLocation="CenterScreen" ResizeMode="NoResize">
	<Grid Margin="15">
		<Grid.RowDefinitions>
			<RowDefinition Height="Auto"/>
			<RowDefinition Height="Auto"/>
			<RowDefinition Height="Auto"/>
			<RowDefinition Height="*"/>
			<RowDefinition Height="Auto"/>
		</Grid.RowDefinitions>
		<Grid.ColumnDefinitions>
			<ColumnDefinition Width="Auto"/>
			<ColumnDefinition Width="*"/>
		</Grid.ColumnDefinitions>

		<TextBlock Grid.Row="0" Grid.ColumnSpan="2" Text="Авторизация" FontSize="16" FontWeight="Bold" Margin="0,0,0,20"/>

		<Label Grid.Row="1" Grid.Column="0" Content="Имя пользователя:" VerticalAlignment="Center"/>
		<TextBox Grid.Row="1" Grid.Column="1" Margin="5" VerticalAlignment="Center" Text="{Binding Username, UpdateSourceTrigger=PropertyChanged}"/>

		<Label Grid.Row="2" Grid.Column="0" Content="Пароль:" VerticalAlignment="Center"/>
		<PasswordBox x:Name="PasswordBox" Grid.Row="2" Grid.Column="1" Margin="5" VerticalAlignment="Center"/>

		<TextBlock Grid.Row="3" Grid.Column="1" Text="{Binding ErrorMessage}" Foreground="Red" TextWrapping="Wrap" VerticalAlignment="Center"/>

		<StackPanel Grid.Row="4" Grid.ColumnSpan="2" Orientation="Horizontal" HorizontalAlignment="Right">
			<Button Content="Регистрация" Width="100" Margin="0,0,10,0" Command="{Binding RegisterCommand}"/>
			<Button Content="Вход" Width="100" Margin="5" IsDefault="True" Command="{Binding LoginCommand}" CommandParameter="{Binding ElementName=PasswordBox}"/>
		</StackPanel>
	</Grid>
</Window>


================================================
FILE: CheckpointApp/Views/LoginWindow.xaml.cs
================================================
﻿using System.Windows;

namespace CheckpointApp.Views
{
    public partial class LoginWindow : Window
    {
        public LoginWindow()
        {
            InitializeComponent();
        }
    }
}



================================================
FILE: CheckpointApp/Views/MainWindow.xaml
================================================
<Window x:Class="CheckpointApp.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:viewModels="clr-namespace:CheckpointApp.ViewModels"
        mc:Ignorable="d"
        d:DataContext="{d:DesignInstance Type=viewModels:MainViewModel}"
        Title="{Binding WindowTitle}" Height="800" Width="1200" WindowStartupLocation="CenterScreen">
	<Window.Resources>
		<BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
	</Window.Resources>
	<DockPanel>
		<Menu DockPanel.Dock="Top">
			<MenuItem Header="_Файл">
				<MenuItem Header="_Экспорт в Excel" Command="{Binding ExportToExcelCommand}"/>
				<Separator/>
				<MenuItem Header="_Выход" Command="{Binding ExitCommand}"/>
			</MenuItem>
			<MenuItem Header="_Инструменты">
				<MenuItem Header="Лица в погранзоне" Command="{Binding ShowPeopleInZoneCommand}"/>
			</MenuItem>
			<MenuItem Header="_Администрирование" Visibility="{Binding IsAdmin, Converter={StaticResource BooleanToVisibilityConverter}}">
				<MenuItem Header="Аналитика" Command="{Binding ShowAnalyticsCommand}"/>
				<MenuItem Header="Управление пользователями" Command="{Binding ManageUsersCommand}"/>
				<MenuItem Header="Список розыска" Command="{Binding ManageWantedListCommand}"/>
				<MenuItem Header="Список наблюдения" Command="{Binding ManageWatchlistCommand}"/>
			</MenuItem>
		</Menu>

		<!-- ПАНЕЛЬ ИНСТРУМЕНТОВ -->
		<ToolBarTray DockPanel.Dock="Top">
			<ToolBar>
				<Button Content="Сохранить" Command="{Binding SaveCrossingCommand}"/>
				<Button Content="Очистить" Command="{Binding ClearFormCommand}"/>
				<Button Content="Обновить" Command="{Binding RefreshDataCommand}"/>
				<Separator/>
				<Button Content="Товары/Грузы" Command="{Binding ShowGoodsWindowCommand}"/>
			</ToolBar>
		</ToolBarTray>

		<!-- СТРОКА СОСТОЯНИЯ -->
		<StatusBar DockPanel.Dock="Bottom">
			<StatusBarItem>
				<TextBlock Text="{Binding StatusMessage}"/>
			</StatusBarItem>
		</StatusBar>

		<!-- ОСНОВНОЕ СОДЕРЖИМОЕ -->
		<Grid Margin="5">
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto"/>
				<RowDefinition Height="*"/>
			</Grid.RowDefinitions>

			<!-- ПАНЕЛЬ МОНИТОРИНГА (DASHBOARD) -->
			<Border Grid.Row="0" BorderBrush="Gray" BorderThickness="1" Padding="5" Margin="0,0,0,5">
				<Grid>
					<!-- Здесь будет содержимое дашборда: статистика и т.д. -->
					<TextBlock Text="Панель мониторинга (реализовать)" VerticalAlignment="Center" HorizontalAlignment="Center"/>
				</Grid>
			</Border>

			<!-- РАЗДЕЛЕННАЯ ПАНЕЛЬ -->
			<Grid Grid.Row="1">
				<Grid.RowDefinitions>
					<RowDefinition Height="Auto"/>
					<RowDefinition Height="5"/>
					<RowDefinition Height="*"/>
				</Grid.RowDefinitions>

				<!-- ВЕРХНЯЯ ПАНЕЛЬ: ФОРМА ВВОДА -->
				<TabControl Grid.Row="0">
					<TabItem Header="Личные данные">
						<Grid Margin="5">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto"/>
								<ColumnDefinition Width="*"/>
								<ColumnDefinition Width="Auto"/>
								<ColumnDefinition Width="*"/>
							</Grid.ColumnDefinitions>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto"/>
								<RowDefinition Height="Auto"/>
								<RowDefinition Height="Auto"/>
								<RowDefinition Height="Auto"/>
								<RowDefinition Height="*"/>
							</Grid.RowDefinitions>

							<Label Grid.Row="0" Grid.Column="0" Content="Фамилия:"/>
							<TextBox Grid.Row="0" Grid.Column="1" Margin="2" Text="{Binding CurrentPerson.LastName, UpdateSourceTrigger=PropertyChanged}"/>
							<Label Grid.Row="0" Grid.Column="2" Content="Имя:"/>
							<TextBox Grid.Row="0" Grid.Column="3" Margin="2" Text="{Binding CurrentPerson.FirstName, UpdateSourceTrigger=PropertyChanged}"/>

							<Label Grid.Row="1" Grid.Column="0" Content="Отчество:"/>
							<TextBox Grid.Row="1" Grid.Column="1" Margin="2" Text="{Binding CurrentPerson.Patronymic, UpdateSourceTrigger=PropertyChanged}"/>
							<Label Grid.Row="1" Grid.Column="2" Content="Дата рождения:"/>
							<DatePicker Grid.Row="1" Grid.Column="3" Margin="2" SelectedDate="{Binding CurrentPersonDob, UpdateSourceTrigger=PropertyChanged}"/>

							<Label Grid.Row="2" Grid.Column="0" Content="Гражданство:"/>
							<ComboBox Grid.Row="2" Grid.Column="1" Margin="2" IsEditable="True" Text="{Binding CurrentPerson.Citizenship, UpdateSourceTrigger=PropertyChanged}"/>
							<Label Grid.Row="2" Grid.Column="2" Content="Паспорт:"/>
							<TextBox Grid.Row="2" Grid.Column="3" Margin="2" Text="{Binding CurrentPerson.PassportData, UpdateSourceTrigger=PropertyChanged}"/>

							<Label Grid.Row="3" Grid.Column="0" Content="Примечания:"/>
							<TextBox Grid.Row="3" Grid.Column="1" Grid.ColumnSpan="3" Margin="2" Height="50" TextWrapping="Wrap" AcceptsReturn="True" Text="{Binding CurrentPerson.Notes}"/>
						</Grid>
					</TabItem>
					<TabItem Header="Детали пересечения">
						<Grid Margin="5">
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*"/>
								<ColumnDefinition Width="*"/>
							</Grid.ColumnDefinitions>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto"/>
								<RowDefinition Height="Auto"/>
								<RowDefinition Height="Auto"/>
								<RowDefinition Height="*"/>
							</Grid.RowDefinitions>

							<!-- Левая колонка -->
							<StackPanel Grid.Row="0" Grid.Column="0" Margin="5">
								<TextBlock Text="Направление:" FontWeight="Bold"/>
								<StackPanel Orientation="Horizontal" Margin="0,5,0,10">
									<RadioButton Content="Въезд" GroupName="Direction" IsChecked="{Binding IsDirectionIn}"/>
									<RadioButton Content="Выезд" GroupName="Direction" Margin="10,0,0,0" IsChecked="{Binding IsDirectionOut}"/>
								</StackPanel>

								<Label Content="Тип пересечения:"/>
								<ComboBox ItemsSource="{Binding CrossingTypes}" SelectedItem="{Binding SelectedCrossingType}"/>

								<Label Content="Цель:"/>
								<ComboBox IsEditable="True" Text="{Binding CurrentCrossing.Purpose}"/>

								<Label Content="НП Следования (для въезда):"/>
								<ComboBox IsEditable="True" Text="{Binding CurrentCrossing.DestinationTown}"/>
							</StackPanel>

							<!-- Правая колонка -->
							<GroupBox Header="Информация о ТС" Grid.Row="0" Grid.Column="1" Margin="5" IsEnabled="{Binding IsVehicleInfoEnabled}">
								<StackPanel>
									<Label Content="Марка:"/>
									<ComboBox IsEditable="True" Text="{Binding CurrentVehicle.Make}"/>
									<Label Content="Гос. номер:"/>
									<TextBox Text="{Binding CurrentVehicle.LicensePlate, UpdateSourceTrigger=PropertyChanged}"/>
								</StackPanel>
							</GroupBox>
						</Grid>
					</TabItem>
				</TabControl>

				<GridSplitter Grid.Row="1" Height="5" HorizontalAlignment="Stretch" Background="LightGray"/>

				<!-- НИЖНЯЯ ПАНЕЛЬ: ЖУРНАЛ ПЕРЕСЕЧЕНИЙ -->
				<ListView Grid.Row="2" ItemsSource="{Binding CrossingsView}" d:ItemsSource="{d:SampleData}">
					<ListView.ItemContainerStyle>
						<!-- Стили для подсветки строк (реализовать) -->
						<Style TargetType="ListViewItem">
							<!-- ... -->
						</Style>
					</ListView.ItemContainerStyle>
					<ListView.View>
						<GridView>
							<GridViewColumn Header="ID" DisplayMemberBinding="{Binding ID}"/>
							<GridViewColumn Header="Дата и время" DisplayMemberBinding="{Binding Timestamp}"/>
							<GridViewColumn Header="ФИО" DisplayMemberBinding="{Binding FullName}" Width="200"/>
							<GridViewColumn Header="Дата рожд." DisplayMemberBinding="{Binding PersonDob}"/>
							<GridViewColumn Header="Паспорт" DisplayMemberBinding="{Binding PersonPassport}" Width="120"/>
							<GridViewColumn Header="Направл." DisplayMemberBinding="{Binding Direction}"/>
							<GridViewColumn Header="Тип" DisplayMemberBinding="{Binding CrossingType}"/>
							<GridViewColumn Header="ТС (Марка/Номер)" DisplayMemberBinding="{Binding VehicleInfo}" Width="150"/>
							<GridViewColumn Header="Цель" DisplayMemberBinding="{Binding Purpose}"/>
							<GridViewColumn Header="НП Следования" DisplayMemberBinding="{Binding DestinationTown}"/>
							<GridViewColumn Header="Оператор" DisplayMemberBinding="{Binding OperatorUsername}"/>
						</GridView>
					</ListView.View>
				</ListView>
			</Grid>
		</Grid>
	</DockPanel>
</Window>



================================================
FILE: CheckpointApp/Views/MainWindow.xaml.cs
================================================
﻿using System.Windows;

namespace CheckpointApp.Views
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }
    }
}



================================================
FILE: CheckpointApp/Views/PeopleInZoneWindow.xaml
================================================
<Window x:Class="CheckpointApp.Views.PeopleInZoneWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d"
        Title="Лица в погранзоне" Height="700" Width="1000"
        WindowStartupLocation="CenterOwner">
	<DockPanel>
		<StatusBar DockPanel.Dock="Bottom">
			<StatusBarItem>
				<TextBlock Text="{Binding StatusText}"/>
			</StatusBarItem>
		</StatusBar>

		<ToolBarTray DockPanel.Dock="Top">
			<ToolBar>
				<Button Content="Обновить" Command="{Binding LoadDataCommand}" Padding="5"/>
			</ToolBar>
		</ToolBarTray>

		<ScrollViewer VerticalScrollBarVisibility="Auto">
			<ItemsControl ItemsSource="{Binding GroupedPersons}">
				<ItemsControl.ItemTemplate>
					<DataTemplate>
						<GroupBox Margin="5" Padding="5">
							<GroupBox.Header>
								<StackPanel Orientation="Horizontal">
									<TextBlock Text="{Binding Key}" FontWeight="Bold" FontSize="14"/>
									<TextBlock Text="{Binding Value.Count, StringFormat=' (Кол-во: {0})'}" Margin="10,0,0,0"/>
								</StackPanel>
							</GroupBox.Header>

							<ListView ItemsSource="{Binding Value}" BorderThickness="0">
								<ListView.View>
									<GridView>
										<GridViewColumn Header="ФИО" DisplayMemberBinding="{Binding FullName}" Width="250"/>
										<GridViewColumn Header="Дата рожд." DisplayMemberBinding="{Binding Dob}" Width="100"/>
										<GridViewColumn Header="Паспорт" DisplayMemberBinding="{Binding PassportData}" Width="120"/>
										<GridViewColumn Header="Гражданство" DisplayMemberBinding="{Binding Citizenship}" Width="120"/>
										<GridViewColumn Header="Время въезда" DisplayMemberBinding="{Binding Timestamp}" Width="150"/>
										<GridViewColumn Header="ТС" DisplayMemberBinding="{Binding VehicleInfo}" Width="150"/>
									</GridView>
								</ListView.View>
							</ListView>
						</GroupBox>
					</DataTemplate>
				</ItemsControl.ItemTemplate>
			</ItemsControl>
		</ScrollViewer>
	</DockPanel>
</Window>


================================================
FILE: CheckpointApp/Views/PeopleInZoneWindow.xaml.cs
================================================
﻿using System.Windows;

namespace CheckpointApp.Views
{
    public partial class PeopleInZoneWindow : Window
    {
        public PeopleInZoneWindow()
        {
            InitializeComponent();
        }
    }
}



================================================
FILE: CheckpointApp/Views/RegistrationWindow.xaml
================================================
<Window x:Class="CheckpointApp.Views.RegistrationWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d"
        Title="Регистрация нового оператора" Height="300" Width="400"
        WindowStartupLocation="CenterScreen" ResizeMode="NoResize">
	<Grid Margin="15">
		<Grid.RowDefinitions>
			<RowDefinition Height="Auto"/>
			<RowDefinition Height="Auto"/>
			<RowDefinition Height="Auto"/>
			<RowDefinition Height="*"/>
			<RowDefinition Height="Auto"/>
		</Grid.RowDefinitions>
		<Grid.ColumnDefinitions>
			<ColumnDefinition Width="Auto"/>
			<ColumnDefinition Width="*"/>
		</Grid.ColumnDefinitions>

		<TextBlock Grid.Row="0" Grid.ColumnSpan="2" Text="Новый оператор" FontSize="16" FontWeight="Bold" Margin="0,0,0,20"/>

		<Label Grid.Row="1" Grid.Column="0" Content="Имя пользователя:" VerticalAlignment="Center"/>
		<TextBox Grid.Row="1" Grid.Column="1" Margin="5" VerticalAlignment="Center" Text="{Binding Username, UpdateSourceTrigger=PropertyChanged}"/>

		<Label Grid.Row="2" Grid.Column="0" Content="Пароль:" VerticalAlignment="Center"/>
		<PasswordBox x:Name="PasswordBox" Grid.Row="2" Grid.Column="1" Margin="5" VerticalAlignment="Center"/>

		<TextBlock Grid.Row="3" Grid.Column="1" Text="{Binding ErrorMessage}" Foreground="Red" TextWrapping="Wrap" VerticalAlignment="Center"/>

		<StackPanel Grid.Row="4" Grid.Column="1" Orientation="Horizontal" HorizontalAlignment="Right">
			<Button Content="Зарегистрировать" Width="120" Margin="5" IsDefault="True" Command="{Binding RegisterUserCommand}" CommandParameter="{Binding ElementName=PasswordBox}"/>
			<Button Content="Отмена" Width="80" Margin="5" IsCancel="True"/>
		</StackPanel>
	</Grid>
</Window>


================================================
FILE: CheckpointApp/Views/RegistrationWindow.xaml.cs
================================================
﻿using System.Windows;

namespace CheckpointApp.Views
{
    public partial class RegistrationWindow : Window
    {
        public RegistrationWindow()
        {
            InitializeComponent();
        }
    }
}



================================================
FILE: CheckpointApp/Views/UserManagementWindow.xaml
================================================
<Window x:Class="CheckpointApp.Views.UserManagementWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d"
        Title="Управление пользователями" Height="500" Width="700"
        WindowStartupLocation="CenterOwner">
    <Grid Margin="10">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="250"/>
        </Grid.ColumnDefinitions>

        <ListView Grid.Column="0" Margin="0,0,10,0" ItemsSource="{Binding Users}" SelectedItem="{Binding SelectedUser}">
            <ListView.View>
                <GridView>
                    <GridViewColumn Header="ID" DisplayMemberBinding="{Binding ID}" Width="50"/>
                    <GridViewColumn Header="Имя пользователя" DisplayMemberBinding="{Binding Username}" Width="200"/>
                    <GridViewColumn Header="Роль" Width="150">
                        <GridViewColumn.CellTemplate>
                            <DataTemplate>
                                <TextBlock>
                                    <TextBlock.Style>
                                        <Style TargetType="TextBlock">
                                            <Setter Property="Text" Value="Оператор"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsAdmin}" Value="True">
                                                    <Setter Property="Text" Value="Администратор"/>
                                                    <Setter Property="FontWeight" Value="Bold"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                            </DataTemplate>
                        </GridViewColumn.CellTemplate>
                    </GridViewColumn>
                </GridView>
            </ListView.View>
        </ListView>

        <StackPanel Grid.Column="1">
            <GroupBox Header="Добавить нового пользователя" Padding="5">
                <StackPanel>
                    <Label Content="Имя пользователя:"/>
                    <TextBox Text="{Binding NewUsername, UpdateSourceTrigger=PropertyChanged}"/>
                    <Label Content="Пароль:"/>
                    <PasswordBox x:Name="PasswordBox"/>
                    <CheckBox Content="Права администратора" Margin="0,10,0,0" IsChecked="{Binding IsNewUserAdmin}"/>
                    <Button Content="Добавить пользователя" Command="{Binding AddUserCommand}" CommandParameter="{Binding ElementName=PasswordBox}" Margin="0,15,0,0"/>
                </StackPanel>
            </GroupBox>

            <Button Content="Удалить выбранного" Command="{Binding DeleteUserCommand}" Margin="0,20,0,0" Background="#FFC1C1"/>
        </StackPanel>
    </Grid>
</Window>


================================================
FILE: CheckpointApp/Views/UserManagementWindow.xaml.cs
================================================
﻿using System.Windows;

namespace CheckpointApp.Views
{
    public partial class UserManagementWindow : Window
    {
        public UserManagementWindow()
        {
            InitializeComponent();
        }
    }
}



================================================
FILE: CheckpointApp/Views/WantedListManagementWindow.xaml
================================================
<Window x:Class="CheckpointApp.Views.WantedListManagementWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d"
        Title="Управление списком розыска" Height="700" Width="900"
        WindowStartupLocation="CenterOwner">
	<DockPanel>
		<StatusBar DockPanel.Dock="Bottom">
			<StatusBarItem>
				<TextBlock Text="{Binding StatusText}"/>
			</StatusBarItem>
		</StatusBar>

		<Grid Margin="10">
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto"/>
				<RowDefinition Height="*"/>
			</Grid.RowDefinitions>

			<GroupBox Header="Добавить / Редактировать запись" Grid.Row="0" Padding="5">
				<Grid>
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="*"/>
						<ColumnDefinition Width="*"/>
						<ColumnDefinition Width="Auto"/>
					</Grid.ColumnDefinitions>

					<StackPanel Grid.Column="0" Margin="5">
						<Label Content="Фамилия:"/>
						<TextBox Text="{Binding NewWantedPerson.LastName, UpdateSourceTrigger=PropertyChanged}"/>
						<Label Content="Имя:"/>
						<TextBox Text="{Binding NewWantedPerson.FirstName, UpdateSourceTrigger=PropertyChanged}"/>
						<Label Content="Отчество:"/>
						<TextBox Text="{Binding NewWantedPerson.Patronymic, UpdateSourceTrigger=PropertyChanged}"/>
						<Label Content="Дата рождения:"/>
						<DatePicker SelectedDate="{Binding NewWantedPersonDob, UpdateSourceTrigger=PropertyChanged}"/>
					</StackPanel>

					<StackPanel Grid.Column="1" Margin="5">
						<Label Content="Информация (причина розыска):"/>
						<TextBox Height="60" TextWrapping="Wrap" AcceptsReturn="True" Text="{Binding NewWantedPerson.Info}"/>
						<Label Content="Предписанные действия:"/>
						<TextBox Height="60" TextWrapping="Wrap" AcceptsReturn="True" Text="{Binding NewWantedPerson.Actions}"/>
					</StackPanel>

					<StackPanel Grid.Column="2" VerticalAlignment="Center" Margin="10,0,0,0">
						<Button Content="Добавить в базу" Command="{Binding AddPersonCommand}" Margin="5" Padding="10,5"/>
						<Button Content="Удалить выбранное" Command="{Binding DeletePersonCommand}" Margin="5" Padding="10,5"/>
						<Button Content="Очистить поля" Command="{Binding ClearFormCommand}" Margin="5" Padding="10,5"/>
					</StackPanel>
				</Grid>
			</GroupBox>

			<ListView Grid.Row="1" Margin="0,10,0,0" ItemsSource="{Binding WantedPersons}" SelectedItem="{Binding SelectedPerson}">
				<ListView.View>
					<GridView>
						<GridViewColumn Header="ID" DisplayMemberBinding="{Binding ID}" Width="50"/>
						<GridViewColumn Header="Фамилия" DisplayMemberBinding="{Binding LastName}" Width="120"/>
						<GridViewColumn Header="Имя" DisplayMemberBinding="{Binding FirstName}" Width="120"/>
						<GridViewColumn Header="Отчество" DisplayMemberBinding="{Binding Patronymic}" Width="120"/>
						<GridViewColumn Header="Дата рожд." DisplayMemberBinding="{Binding Dob}" Width="100"/>
						<GridViewColumn Header="Информация" DisplayMemberBinding="{Binding Info}" Width="180"/>
						<GridViewColumn Header="Действия" DisplayMemberBinding="{Binding Actions}" Width="180"/>
					</GridView>
				</ListView.View>
			</ListView>
		</Grid>
	</DockPanel>
</Window>


================================================
FILE: CheckpointApp/Views/WantedListManagementWindow.xaml.cs
================================================
﻿using System.Windows;

namespace CheckpointApp.Views
{
    public partial class WantedListManagementWindow : Window
    {
        public WantedListManagementWindow()
        {
            InitializeComponent();
        }
    }
}



================================================
FILE: CheckpointApp/Views/WatchlistManagementWindow.xaml
================================================
<Window x:Class="CheckpointApp.Views.WatchlistManagementWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d"
        Title="Управление списком наблюдения" Height="600" Width="800"
        WindowStartupLocation="CenterOwner">
	<DockPanel>
		<StatusBar DockPanel.Dock="Bottom">
			<StatusBarItem>
				<TextBlock Text="{Binding StatusText}"/>
			</StatusBarItem>
		</StatusBar>

		<Grid Margin="10">
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto"/>
				<RowDefinition Height="*"/>
			</Grid.RowDefinitions>

			<GroupBox Header="Добавить / Редактировать запись" Grid.Row="0" Padding="5">
				<Grid>
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="*"/>
						<ColumnDefinition Width="*"/>
						<ColumnDefinition Width="Auto"/>
					</Grid.ColumnDefinitions>

					<StackPanel Grid.Column="0" Margin="5">
						<Label Content="Фамилия:"/>
						<TextBox Text="{Binding NewWatchlistPerson.LastName, UpdateSourceTrigger=PropertyChanged}"/>
						<Label Content="Имя:"/>
						<TextBox Text="{Binding NewWatchlistPerson.FirstName, UpdateSourceTrigger=PropertyChanged}"/>
						<Label Content="Отчество:"/>
						<TextBox Text="{Binding NewWatchlistPerson.Patronymic, UpdateSourceTrigger=PropertyChanged}"/>
					</StackPanel>

					<StackPanel Grid.Column="1" Margin="5">
						<Label Content="Дата рождения:"/>
						<DatePicker SelectedDate="{Binding NewWatchlistPersonDob, UpdateSourceTrigger=PropertyChanged}"/>
						<Label Content="Причина нахождения в списке:"/>
						<TextBox Height="80" TextWrapping="Wrap" AcceptsReturn="True" Text="{Binding NewWatchlistPerson.Reason}"/>
					</StackPanel>

					<StackPanel Grid.Column="2" VerticalAlignment="Center" Margin="10,0,0,0">
						<Button Content="Добавить в базу" Command="{Binding AddPersonCommand}" Margin="5" Padding="10,5"/>
						<Button Content="Удалить выбранное" Command="{Binding DeletePersonCommand}" Margin="5" Padding="10,5"/>
						<Button Content="Очистить поля" Command="{Binding ClearFormCommand}" Margin="5" Padding="10,5"/>
					</StackPanel>
				</Grid>
			</GroupBox>

			<ListView Grid.Row="1" Margin="0,10,0,0" ItemsSource="{Binding WatchlistPersons}" SelectedItem="{Binding SelectedPerson}">
				<ListView.View>
					<GridView>
						<GridViewColumn Header="ID" DisplayMemberBinding="{Binding ID}" Width="50"/>
						<GridViewColumn Header="Фамилия" DisplayMemberBinding="{Binding LastName}" Width="120"/>
						<GridViewColumn Header="Имя" DisplayMemberBinding="{Binding FirstName}" Width="120"/>
						<GridViewColumn Header="Отчество" DisplayMemberBinding="{Binding Patronymic}" Width="120"/>
						<GridViewColumn Header="Дата рожд." DisplayMemberBinding="{Binding Dob}" Width="100"/>
						<GridViewColumn Header="Причина" DisplayMemberBinding="{Binding Reason}" Width="250"/>
					</GridView>
				</ListView.View>
			</ListView>
		</Grid>
	</DockPanel>
</Window>


================================================
FILE: CheckpointApp/Views/WatchlistManagementWindow.xaml.cs
================================================
﻿using System.Windows;

namespace CheckpointApp.Views
{
    public partial class WatchlistManagementWindow : Window
    {
        public WatchlistManagementWindow()
        {
            InitializeComponent();
        }
    }
}


